<?php
/**
 * BSISV1Shipment
 *
 * PHP version 5
 *
 * @category Class
 * @package  UPS\GlobalCheckout
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Guaranteed Quote API v1
 *
 * This API provides a Global Landed Cost (GLC) duty and tax rate quote for shippers.  ## Key Business Values - Simplifies the International Cross Border shipping process.  For more information on the Global Checkout API, please visit the <a href=\"https://developer.ups.com/api/reference/globalcheckout/product-info\" target=\"_blank\" rel=\"noopener noreferrer\">Product Info</a> page.  <a href=\"https://developer.ups.com/api/reference/globalcheckout/appendix?loc=en_US\" target=\"_blank\" rel=\"noopener noreferrer\">Appendix</a> </br><p>Explore API documentation and sample applications through GitHub.</p> <a href=\"https://github.com/UPS-API\" target=\"_blank\" rel=\"noopener noreferrer\">   <img src=\"https://www.ups.com/assets/resources/webcontent/images/gitHubButton.svg\" alt=\"Open in GitHub\" style=\"width: 128px; height: 32px;\"> </a>
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.71
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace UPS\GlobalCheckout\GlobalCheckout;

use \ArrayAccess;
use \UPS\GlobalCheckout\ObjectSerializer;

/**
 * BSISV1Shipment Class Doc Comment
 *
 * @category Class
 * @package  UPS\GlobalCheckout
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BSISV1Shipment implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BSIS_v1_Shipment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'import_country_code' => '',
        'import_province' => '',
        'ship_date' => '',
        'export_country_code' => '',
        'trans_modes' => '',
        'transport_cost' => '\UPS\GlobalCheckout\GlobalCheckout\BSISV1ChargeDetail',
        'insurance_cost' => '\UPS\GlobalCheckout\GlobalCheckout\BSISV1ChargeDetail',
        'shipment_type' => '',
        'shipper_address' => '\UPS\GlobalCheckout\GlobalCheckout\BSISV1Address',
        'ship_to_address' => '',
        'shipment_items' => ''
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'import_country_code' => null,
        'import_province' => null,
        'ship_date' => 'date',
        'export_country_code' => null,
        'trans_modes' => null,
        'transport_cost' => null,
        'insurance_cost' => null,
        'shipment_type' => null,
        'shipper_address' => null,
        'ship_to_address' => null,
        'shipment_items' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'import_country_code' => 'importCountryCode',
        'import_province' => 'importProvince',
        'ship_date' => 'shipDate',
        'export_country_code' => 'exportCountryCode',
        'trans_modes' => 'transModes',
        'transport_cost' => 'transportCost',
        'insurance_cost' => 'insuranceCost',
        'shipment_type' => 'shipmentType',
        'shipper_address' => 'shipperAddress',
        'ship_to_address' => 'shipToAddress',
        'shipment_items' => 'shipmentItems'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'import_country_code' => 'setImportCountryCode',
        'import_province' => 'setImportProvince',
        'ship_date' => 'setShipDate',
        'export_country_code' => 'setExportCountryCode',
        'trans_modes' => 'setTransModes',
        'transport_cost' => 'setTransportCost',
        'insurance_cost' => 'setInsuranceCost',
        'shipment_type' => 'setShipmentType',
        'shipper_address' => 'setShipperAddress',
        'ship_to_address' => 'setShipToAddress',
        'shipment_items' => 'setShipmentItems'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'import_country_code' => 'getImportCountryCode',
        'import_province' => 'getImportProvince',
        'ship_date' => 'getShipDate',
        'export_country_code' => 'getExportCountryCode',
        'trans_modes' => 'getTransModes',
        'transport_cost' => 'getTransportCost',
        'insurance_cost' => 'getInsuranceCost',
        'shipment_type' => 'getShipmentType',
        'shipper_address' => 'getShipperAddress',
        'ship_to_address' => 'getShipToAddress',
        'shipment_items' => 'getShipmentItems'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['import_country_code'] = isset($data['import_country_code']) ? $data['import_country_code'] : null;
        $this->container['import_province'] = isset($data['import_province']) ? $data['import_province'] : null;
        $this->container['ship_date'] = isset($data['ship_date']) ? $data['ship_date'] : null;
        $this->container['export_country_code'] = isset($data['export_country_code']) ? $data['export_country_code'] : null;
        $this->container['trans_modes'] = isset($data['trans_modes']) ? $data['trans_modes'] : null;
        $this->container['transport_cost'] = isset($data['transport_cost']) ? $data['transport_cost'] : null;
        $this->container['insurance_cost'] = isset($data['insurance_cost']) ? $data['insurance_cost'] : null;
        $this->container['shipment_type'] = isset($data['shipment_type']) ? $data['shipment_type'] : null;
        $this->container['shipper_address'] = isset($data['shipper_address']) ? $data['shipper_address'] : null;
        $this->container['ship_to_address'] = isset($data['ship_to_address']) ? $data['ship_to_address'] : null;
        $this->container['shipment_items'] = isset($data['shipment_items']) ? $data['shipment_items'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['import_country_code'] === null) {
            $invalidProperties[] = "'import_country_code' can't be null";
        }
        if ($this->container['export_country_code'] === null) {
            $invalidProperties[] = "'export_country_code' can't be null";
        }
        if ($this->container['shipper_address'] === null) {
            $invalidProperties[] = "'shipper_address' can't be null";
        }
        if ($this->container['ship_to_address'] === null) {
            $invalidProperties[] = "'ship_to_address' can't be null";
        }
        if ($this->container['shipment_items'] === null) {
            $invalidProperties[] = "'shipment_items' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets import_country_code
     *
     * @return 
     */
    public function getImportCountryCode()
    {
        return $this->container['import_country_code'];
    }

    /**
     * Sets import_country_code
     *
     * @param  $import_country_code The ISO 3166 code of the country imported from. Click <a href=\"https://developer.ups.com/api/reference/globalcheckout/appendix?loc=en_US\" target=\"_blank\" rel=\"noopener noreferrer\">here</a> for more information.
     *
     * @return $this
     */
    public function setImportCountryCode($import_country_code)
    {
        $this->container['import_country_code'] = $import_country_code;

        return $this;
    }

    /**
     * Gets import_province
     *
     * @return 
     */
    public function getImportProvince()
    {
        return $this->container['import_province'];
    }

    /**
     * Sets import_province
     *
     * @param  $import_province Specifies the Province taken from. Click <a href=\"https://developer.ups.com/api/reference/globalcheckout/appendix?loc=en_US\" target=\"_blank\" rel=\"noopener noreferrer\">here</a> for more information.
     *
     * @return $this
     */
    public function setImportProvince($import_province)
    {
        $this->container['import_province'] = $import_province;

        return $this;
    }

    /**
     * Gets ship_date
     *
     * @return 
     */
    public function getShipDate()
    {
        return $this->container['ship_date'];
    }

    /**
     * Sets ship_date
     *
     * @param  $ship_date ShipDate of the Request (YYYY-MM-DD).
     *
     * @return $this
     */
    public function setShipDate($ship_date)
    {
        $this->container['ship_date'] = $ship_date;

        return $this;
    }

    /**
     * Gets export_country_code
     *
     * @return 
     */
    public function getExportCountryCode()
    {
        return $this->container['export_country_code'];
    }

    /**
     * Sets export_country_code
     *
     * @param  $export_country_code The ISO 3166 code of the country exported to.
     *
     * @return $this
     */
    public function setExportCountryCode($export_country_code)
    {
        $this->container['export_country_code'] = $export_country_code;

        return $this;
    }

    /**
     * Gets trans_modes
     *
     * @return 
     */
    public function getTransModes()
    {
        return $this->container['trans_modes'];
    }

    /**
     * Sets trans_modes
     *
     * @param  $trans_modes The shipment mode of transportation. If not one of the listed values then it will default to the first one from the import country.  | Mode      | Description                                   | | :--:      | :--                                           | | DOM_AIR   | Domestic Air transportation                   | | DOM_OCEAN | Domestic Ocean transportation                 | | DOM_RAIL  | Domestic Rail transportation                  | | DOM_TRUCK | Domestic Truck transportation                 | | INT_AIR   | International Air transportation              | | INT_OCEAN | International Ocean transportation            | | INT_RAIL  | International Rail transportation             | | INT_TRUCK | International/Interstate Truck transportation |
     *
     * @return $this
     */
    public function setTransModes($trans_modes)
    {
        $this->container['trans_modes'] = $trans_modes;

        return $this;
    }

    /**
     * Gets transport_cost
     *
     * @return \UPS\GlobalCheckout\GlobalCheckout\BSISV1ChargeDetail
     */
    public function getTransportCost()
    {
        return $this->container['transport_cost'];
    }

    /**
     * Sets transport_cost
     *
     * @param \UPS\GlobalCheckout\GlobalCheckout\BSISV1ChargeDetail $transport_cost Specifies the Transport Costs, which are used for tariff calculations in some governments.  If needed and not provided then internal Rate call will be made to retrieve it.
     *
     * @return $this
     */
    public function setTransportCost($transport_cost)
    {
        $this->container['transport_cost'] = $transport_cost;

        return $this;
    }

    /**
     * Gets insurance_cost
     *
     * @return \UPS\GlobalCheckout\GlobalCheckout\BSISV1ChargeDetail
     */
    public function getInsuranceCost()
    {
        return $this->container['insurance_cost'];
    }

    /**
     * Sets insurance_cost
     *
     * @param \UPS\GlobalCheckout\GlobalCheckout\BSISV1ChargeDetail $insurance_cost Specifies the fee charged by UPS for insuring the package, which could be used for tariff calculations in some governments. This will be defaulted to 0 if needed and not provided.
     *
     * @return $this
     */
    public function setInsuranceCost($insurance_cost)
    {
        $this->container['insurance_cost'] = $insurance_cost;

        return $this;
    }

    /**
     * Gets shipment_type
     *
     * @return 
     */
    public function getShipmentType()
    {
        return $this->container['shipment_type'];
    }

    /**
     * Sets shipment_type
     *
     * @param  $shipment_type Specifies the shipment type.  | Type  | Description                                                       | | :--:  | :--                                                               | | GIFT  | GIFT                                                              |  | COMM  | Sale, Sample, Repair                                              | | OTHR  | Return, Other, and Intercompany Data, Anything else not supported | | PERS  | Personal                                                          |
     *
     * @return $this
     */
    public function setShipmentType($shipment_type)
    {
        $this->container['shipment_type'] = $shipment_type;

        return $this;
    }

    /**
     * Gets shipper_address
     *
     * @return \UPS\GlobalCheckout\GlobalCheckout\BSISV1Address
     */
    public function getShipperAddress()
    {
        return $this->container['shipper_address'];
    }

    /**
     * Sets shipper_address
     *
     * @param \UPS\GlobalCheckout\GlobalCheckout\BSISV1Address $shipper_address Shipper Address of request. Needed for internal rate call to calculate transportCost if that is needed and not provided.
     *
     * @return $this
     */
    public function setShipperAddress($shipper_address)
    {
        $this->container['shipper_address'] = $shipper_address;

        return $this;
    }

    /**
     * Gets ship_to_address
     *
     * @return 
     */
    public function getShipToAddress()
    {
        return $this->container['ship_to_address'];
    }

    /**
     * Sets ship_to_address
     *
     * @param  $ship_to_address ShipTo Address of request. Needed for internal rate call to calculate transportCost if that is needed and not provided.
     *
     * @return $this
     */
    public function setShipToAddress($ship_to_address)
    {
        $this->container['ship_to_address'] = $ship_to_address;

        return $this;
    }

    /**
     * Gets shipment_items
     *
     * @return 
     */
    public function getShipmentItems()
    {
        return $this->container['shipment_items'];
    }

    /**
     * Sets shipment_items
     *
     * @param  $shipment_items array of request ShipmentItems.
     *
     * @return $this
     */
    public function setShipmentItems($shipment_items)
    {
        $this->container['shipment_items'] = $shipment_items;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
