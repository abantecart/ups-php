<?php
/**
 * BSISV1QuoteResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  UPS\GlobalCheckout
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Guaranteed Quote API v1
 *
 * This API provides a Global Landed Cost (GLC) duty and tax rate quote for shippers.  ## Key Business Values - Simplifies the International Cross Border shipping process.  For more information on the Global Checkout API, please visit the <a href=\"https://developer.ups.com/api/reference/globalcheckout/product-info\" target=\"_blank\" rel=\"noopener noreferrer\">Product Info</a> page.  <a href=\"https://developer.ups.com/api/reference/globalcheckout/appendix?loc=en_US\" target=\"_blank\" rel=\"noopener noreferrer\">Appendix</a> </br><p>Explore API documentation and sample applications through GitHub.</p> <a href=\"https://github.com/UPS-API\" target=\"_blank\" rel=\"noopener noreferrer\">   <img src=\"https://www.ups.com/assets/resources/webcontent/images/gitHubButton.svg\" alt=\"Open in GitHub\" style=\"width: 128px; height: 32px;\"> </a>
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.71
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace UPS\GlobalCheckout\GlobalCheckout;

use \ArrayAccess;
use \UPS\GlobalCheckout\ObjectSerializer;

/**
 * BSISV1QuoteResponse Class Doc Comment
 *
 * @category Class
 * @package  UPS\GlobalCheckout
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BSISV1QuoteResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BSIS_v1_QuoteResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'quote_id' => '',
        'quote_creation_timestamp' => '',
        'reference_number' => '',
        'quote_expiration_date' => '',
        'gc_total' => '',
        'additional_properties' => ''
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'quote_id' => null,
        'quote_creation_timestamp' => 'datetime',
        'reference_number' => null,
        'quote_expiration_date' => 'date',
        'gc_total' => null,
        'additional_properties' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'quote_id' => 'quoteId',
        'quote_creation_timestamp' => 'quoteCreationTimestamp',
        'reference_number' => 'referenceNumber',
        'quote_expiration_date' => 'quoteExpirationDate',
        'gc_total' => 'gcTotal',
        'additional_properties' => 'additionalProperties'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'quote_id' => 'setQuoteId',
        'quote_creation_timestamp' => 'setQuoteCreationTimestamp',
        'reference_number' => 'setReferenceNumber',
        'quote_expiration_date' => 'setQuoteExpirationDate',
        'gc_total' => 'setGcTotal',
        'additional_properties' => 'setAdditionalProperties'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'quote_id' => 'getQuoteId',
        'quote_creation_timestamp' => 'getQuoteCreationTimestamp',
        'reference_number' => 'getReferenceNumber',
        'quote_expiration_date' => 'getQuoteExpirationDate',
        'gc_total' => 'getGcTotal',
        'additional_properties' => 'getAdditionalProperties'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['quote_id'] = isset($data['quote_id']) ? $data['quote_id'] : null;
        $this->container['quote_creation_timestamp'] = isset($data['quote_creation_timestamp']) ? $data['quote_creation_timestamp'] : null;
        $this->container['reference_number'] = isset($data['reference_number']) ? $data['reference_number'] : null;
        $this->container['quote_expiration_date'] = isset($data['quote_expiration_date']) ? $data['quote_expiration_date'] : null;
        $this->container['gc_total'] = isset($data['gc_total']) ? $data['gc_total'] : null;
        $this->container['additional_properties'] = isset($data['additional_properties']) ? $data['additional_properties'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['quote_id'] === null) {
            $invalidProperties[] = "'quote_id' can't be null";
        }
        if ($this->container['quote_creation_timestamp'] === null) {
            $invalidProperties[] = "'quote_creation_timestamp' can't be null";
        }
        if ($this->container['quote_expiration_date'] === null) {
            $invalidProperties[] = "'quote_expiration_date' can't be null";
        }
        if ($this->container['gc_total'] === null) {
            $invalidProperties[] = "'gc_total' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets quote_id
     *
     * @return 
     */
    public function getQuoteId()
    {
        return $this->container['quote_id'];
    }

    /**
     * Sets quote_id
     *
     * @param  $quote_id unique quote id.
     *
     * @return $this
     */
    public function setQuoteId($quote_id)
    {
        $this->container['quote_id'] = $quote_id;

        return $this;
    }

    /**
     * Gets quote_creation_timestamp
     *
     * @return 
     */
    public function getQuoteCreationTimestamp()
    {
        return $this->container['quote_creation_timestamp'];
    }

    /**
     * Sets quote_creation_timestamp
     *
     * @param  $quote_creation_timestamp Timestamp for quote generation(UTC).
     *
     * @return $this
     */
    public function setQuoteCreationTimestamp($quote_creation_timestamp)
    {
        $this->container['quote_creation_timestamp'] = $quote_creation_timestamp;

        return $this;
    }

    /**
     * Gets reference_number
     *
     * @return 
     */
    public function getReferenceNumber()
    {
        return $this->container['reference_number'];
    }

    /**
     * Sets reference_number
     *
     * @param  $reference_number A reference for customer internal tracking from the request .
     *
     * @return $this
     */
    public function setReferenceNumber($reference_number)
    {
        $this->container['reference_number'] = $reference_number;

        return $this;
    }

    /**
     * Gets quote_expiration_date
     *
     * @return 
     */
    public function getQuoteExpirationDate()
    {
        return $this->container['quote_expiration_date'];
    }

    /**
     * Sets quote_expiration_date
     *
     * @param  $quote_expiration_date Date after which the quote is no longer valid. yyyy-mm-dd format.
     *
     * @return $this
     */
    public function setQuoteExpirationDate($quote_expiration_date)
    {
        $this->container['quote_expiration_date'] = $quote_expiration_date;

        return $this;
    }

    /**
     * Gets gc_total
     *
     * @return 
     */
    public function getGcTotal()
    {
        return $this->container['gc_total'];
    }

    /**
     * Sets gc_total
     *
     * @param  $gc_total array for buyer and billing Global checkout total items.
     *
     * @return $this
     */
    public function setGcTotal($gc_total)
    {
        $this->container['gc_total'] = $gc_total;

        return $this;
    }

    /**
     * Gets additional_properties
     *
     * @return 
     */
    public function getAdditionalProperties()
    {
        return $this->container['additional_properties'];
    }

    /**
     * Sets additional_properties
     *
     * @param  $additional_properties additional_properties
     *
     * @return $this
     */
    public function setAdditionalProperties($additional_properties)
    {
        $this->container['additional_properties'] = $additional_properties;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
