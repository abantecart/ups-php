<?php
/**
 * BSISV1ShipmentItemRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  UPS\GlobalCheckout
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Guaranteed Quote API v1
 *
 * This API provides a Global Landed Cost (GLC) duty and tax rate quote for shippers.  ## Key Business Values - Simplifies the International Cross Border shipping process.  For more information on the Global Checkout API, please visit the <a href=\"https://developer.ups.com/api/reference/globalcheckout/product-info\" target=\"_blank\" rel=\"noopener noreferrer\">Product Info</a> page.  <a href=\"https://developer.ups.com/api/reference/globalcheckout/appendix?loc=en_US\" target=\"_blank\" rel=\"noopener noreferrer\">Appendix</a> </br><p>Explore API documentation and sample applications through GitHub.</p> <a href=\"https://github.com/UPS-API\" target=\"_blank\" rel=\"noopener noreferrer\">   <img src=\"https://www.ups.com/assets/resources/webcontent/images/gitHubButton.svg\" alt=\"Open in GitHub\" style=\"width: 128px; height: 32px;\"> </a>
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.71
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace UPS\GlobalCheckout\GlobalCheckout;

use \ArrayAccess;
use \UPS\GlobalCheckout\ObjectSerializer;

/**
 * BSISV1ShipmentItemRequest Class Doc Comment
 *
 * @category Class
 * @description Object containing the details of each item in the shipment.
 * @package  UPS\GlobalCheckout
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BSISV1ShipmentItemRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BSIS_v1_ShipmentItemRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'gross_weight' => '\UPS\GlobalCheckout\GlobalCheckout\BSISV1ShipmentItemRequestGrossWeight',
        'unit_price' => '\UPS\GlobalCheckout\GlobalCheckout\BSISV1ChargeDetail',
        'quantity' => '\UPS\GlobalCheckout\GlobalCheckout\BSISV1ShipmentItemRequestQuantity',
        'part_number' => '',
        'description' => '',
        'origin_country_code' => '',
        'dimension' => '\UPS\GlobalCheckout\GlobalCheckout\BSISV1ShipmentItemRequestDimension'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'gross_weight' => null,
        'unit_price' => null,
        'quantity' => null,
        'part_number' => null,
        'description' => null,
        'origin_country_code' => null,
        'dimension' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'gross_weight' => 'grossWeight',
        'unit_price' => 'unitPrice',
        'quantity' => 'quantity',
        'part_number' => 'partNumber',
        'description' => 'description',
        'origin_country_code' => 'originCountryCode',
        'dimension' => 'dimension'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'gross_weight' => 'setGrossWeight',
        'unit_price' => 'setUnitPrice',
        'quantity' => 'setQuantity',
        'part_number' => 'setPartNumber',
        'description' => 'setDescription',
        'origin_country_code' => 'setOriginCountryCode',
        'dimension' => 'setDimension'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'gross_weight' => 'getGrossWeight',
        'unit_price' => 'getUnitPrice',
        'quantity' => 'getQuantity',
        'part_number' => 'getPartNumber',
        'description' => 'getDescription',
        'origin_country_code' => 'getOriginCountryCode',
        'dimension' => 'getDimension'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['gross_weight'] = isset($data['gross_weight']) ? $data['gross_weight'] : null;
        $this->container['unit_price'] = isset($data['unit_price']) ? $data['unit_price'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['part_number'] = isset($data['part_number']) ? $data['part_number'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['origin_country_code'] = isset($data['origin_country_code']) ? $data['origin_country_code'] : null;
        $this->container['dimension'] = isset($data['dimension']) ? $data['dimension'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['unit_price'] === null) {
            $invalidProperties[] = "'unit_price' can't be null";
        }
        if ($this->container['quantity'] === null) {
            $invalidProperties[] = "'quantity' can't be null";
        }
        if ($this->container['part_number'] === null) {
            $invalidProperties[] = "'part_number' can't be null";
        }
        if ($this->container['origin_country_code'] === null) {
            $invalidProperties[] = "'origin_country_code' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets gross_weight
     *
     * @return \UPS\GlobalCheckout\GlobalCheckout\BSISV1ShipmentItemRequestGrossWeight
     */
    public function getGrossWeight()
    {
        return $this->container['gross_weight'];
    }

    /**
     * Sets gross_weight
     *
     * @param \UPS\GlobalCheckout\GlobalCheckout\BSISV1ShipmentItemRequestGrossWeight $gross_weight gross_weight
     *
     * @return $this
     */
    public function setGrossWeight($gross_weight)
    {
        $this->container['gross_weight'] = $gross_weight;

        return $this;
    }

    /**
     * Gets unit_price
     *
     * @return \UPS\GlobalCheckout\GlobalCheckout\BSISV1ChargeDetail
     */
    public function getUnitPrice()
    {
        return $this->container['unit_price'];
    }

    /**
     * Sets unit_price
     *
     * @param \UPS\GlobalCheckout\GlobalCheckout\BSISV1ChargeDetail $unit_price unit_price
     *
     * @return $this
     */
    public function setUnitPrice($unit_price)
    {
        $this->container['unit_price'] = $unit_price;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return \UPS\GlobalCheckout\GlobalCheckout\BSISV1ShipmentItemRequestQuantity
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param \UPS\GlobalCheckout\GlobalCheckout\BSISV1ShipmentItemRequestQuantity $quantity quantity
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets part_number
     *
     * @return 
     */
    public function getPartNumber()
    {
        return $this->container['part_number'];
    }

    /**
     * Sets part_number
     *
     * @param  $part_number Part number or SKU, pre-approved for Garanteed Landed Cost service to identifier the item being shipped.
     *
     * @return $this
     */
    public function setPartNumber($part_number)
    {
        $this->container['part_number'] = $part_number;

        return $this;
    }

    /**
     * Gets description
     *
     * @return 
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param  $description This field is populated with the hscode description.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets origin_country_code
     *
     * @return 
     */
    public function getOriginCountryCode()
    {
        return $this->container['origin_country_code'];
    }

    /**
     * Sets origin_country_code
     *
     * @param  $origin_country_code The ISO 3166 code of the shipment item country.
     *
     * @return $this
     */
    public function setOriginCountryCode($origin_country_code)
    {
        $this->container['origin_country_code'] = $origin_country_code;

        return $this;
    }

    /**
     * Gets dimension
     *
     * @return \UPS\GlobalCheckout\GlobalCheckout\BSISV1ShipmentItemRequestDimension
     */
    public function getDimension()
    {
        return $this->container['dimension'];
    }

    /**
     * Sets dimension
     *
     * @param \UPS\GlobalCheckout\GlobalCheckout\BSISV1ShipmentItemRequestDimension $dimension dimension
     *
     * @return $this
     */
    public function setDimension($dimension)
    {
        $this->container['dimension'] = $dimension;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
