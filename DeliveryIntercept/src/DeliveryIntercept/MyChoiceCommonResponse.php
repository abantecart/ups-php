<?php
/**
 * MyChoiceCommonResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  UPS\DeliveryIntercept
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Delivery Intercept® API
 *
 * With the UPS Delivery Intercept® API, a shipper can manage the delivery details of their shipment, prior to delivery.  # Business Values  **Key Business Values:** - elimination of manually processing customer requests - acceptance of requests later in the delivery process  <a href=\"https://developer.ups.com/api/reference/deliveryintercept/product-info\" target=\"_blank\" rel=\"noopener\">Product Info</a>  <a href=\"https://god.gw.postman.com/run-collection/29542085-f2409ef1-39c9-4f4a-a509-a3f860068ff4?action=collection%2Ffork&source=rip_markdown&collection-url=entityId%3D29542085-f2409ef1-39c9-4f4a-a509-a3f860068ff4%26entityType%3Dcollection%26workspaceId%3D7e7595f0-4829-4f9a-aee1-75c126b9d417\" target=\"_blank\" rel=\"noopener noreferrer\">   <img src=\"https://run.pstmn.io/button.svg\" alt=\"Run In Postman\" style=\"width: 128px; height: 32px;\"> </a>  # CIE Behavior  The Delivery Intercept API will return a stubbed success response if the correct data is used for a given endpoint. The static data that is valid for each of the endpoints is in the table below:  | Endpoint | transId | trackingNumber                                                                                                                                                                                              | |------------|-------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------| | /charges     | SIICharges         | 1Z4096YY0316914058 | /willcall     | SIIWillcall        | 1Z4096YY0316914058 | /return     | SIIReturn         | 1Z4096YY0316914058 | /reschedule     | SIIReschedule         | 1Z4096YY0316914058 | /redirect/address     | SIIRedirect         | 1Z4096YY0316914058 | /cancel     | SIICancel         | 1Z4096YY0316914058
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.71
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace UPS\DeliveryIntercept\DeliveryIntercept;

use \ArrayAccess;
use \UPS\DeliveryIntercept\ObjectSerializer;

/**
 * MyChoiceCommonResponse Class Doc Comment
 *
 * @category Class
 * @package  UPS\DeliveryIntercept
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MyChoiceCommonResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'MyChoiceCommonResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'transaction_id' => '',
        'status_code' => '',
        'status_msg' => '',
        'sub_status_code' => '',
        'success' => '',
        'errors' => '',
        'warnings' => '',
        'charge_info' => '',
        'mycagreement_upto_date' => ''
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'transaction_id' => null,
        'status_code' => null,
        'status_msg' => null,
        'sub_status_code' => null,
        'success' => null,
        'errors' => null,
        'warnings' => null,
        'charge_info' => null,
        'mycagreement_upto_date' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'transaction_id' => 'transactionId',
        'status_code' => 'statusCode',
        'status_msg' => 'statusMsg',
        'sub_status_code' => 'subStatusCode',
        'success' => 'success',
        'errors' => 'errors',
        'warnings' => 'warnings',
        'charge_info' => 'chargeInfo',
        'mycagreement_upto_date' => 'mycagreementUptoDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'transaction_id' => 'setTransactionId',
        'status_code' => 'setStatusCode',
        'status_msg' => 'setStatusMsg',
        'sub_status_code' => 'setSubStatusCode',
        'success' => 'setSuccess',
        'errors' => 'setErrors',
        'warnings' => 'setWarnings',
        'charge_info' => 'setChargeInfo',
        'mycagreement_upto_date' => 'setMycagreementUptoDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'transaction_id' => 'getTransactionId',
        'status_code' => 'getStatusCode',
        'status_msg' => 'getStatusMsg',
        'sub_status_code' => 'getSubStatusCode',
        'success' => 'getSuccess',
        'errors' => 'getErrors',
        'warnings' => 'getWarnings',
        'charge_info' => 'getChargeInfo',
        'mycagreement_upto_date' => 'getMycagreementUptoDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['transaction_id'] = isset($data['transaction_id']) ? $data['transaction_id'] : null;
        $this->container['status_code'] = isset($data['status_code']) ? $data['status_code'] : null;
        $this->container['status_msg'] = isset($data['status_msg']) ? $data['status_msg'] : null;
        $this->container['sub_status_code'] = isset($data['sub_status_code']) ? $data['sub_status_code'] : null;
        $this->container['success'] = isset($data['success']) ? $data['success'] : null;
        $this->container['errors'] = isset($data['errors']) ? $data['errors'] : null;
        $this->container['warnings'] = isset($data['warnings']) ? $data['warnings'] : null;
        $this->container['charge_info'] = isset($data['charge_info']) ? $data['charge_info'] : null;
        $this->container['mycagreement_upto_date'] = isset($data['mycagreement_upto_date']) ? $data['mycagreement_upto_date'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['transaction_id'] === null) {
            $invalidProperties[] = "'transaction_id' can't be null";
        }
        if ($this->container['status_code'] === null) {
            $invalidProperties[] = "'status_code' can't be null";
        }
        if ($this->container['success'] === null) {
            $invalidProperties[] = "'success' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets transaction_id
     *
     * @return 
     */
    public function getTransactionId()
    {
        return $this->container['transaction_id'];
    }

    /**
     * Sets transaction_id
     *
     * @param  $transaction_id A unique value that will be used to identify the transaction for logging and troubleshooting purposes.
     *
     * @return $this
     */
    public function setTransactionId($transaction_id)
    {
        $this->container['transaction_id'] = $transaction_id;

        return $this;
    }

    /**
     * Gets status_code
     *
     * @return 
     */
    public function getStatusCode()
    {
        return $this->container['status_code'];
    }

    /**
     * Sets status_code
     *
     * @param  $status_code API response status code, Internal code regarding the success or failure of the operation
     *
     * @return $this
     */
    public function setStatusCode($status_code)
    {
        $this->container['status_code'] = $status_code;

        return $this;
    }

    /**
     * Gets status_msg
     *
     * @return 
     */
    public function getStatusMsg()
    {
        return $this->container['status_msg'];
    }

    /**
     * Sets status_msg
     *
     * @param  $status_msg API response status message, Internal message regarding the success or failure of the operation
     *
     * @return $this
     */
    public function setStatusMsg($status_msg)
    {
        $this->container['status_msg'] = $status_msg;

        return $this;
    }

    /**
     * Gets sub_status_code
     *
     * @return 
     */
    public function getSubStatusCode()
    {
        return $this->container['sub_status_code'];
    }

    /**
     * Sets sub_status_code
     *
     * @param  $sub_status_code A new status code for adding granularity to the existing status code structure
     *
     * @return $this
     */
    public function setSubStatusCode($sub_status_code)
    {
        $this->container['sub_status_code'] = $sub_status_code;

        return $this;
    }

    /**
     * Gets success
     *
     * @return 
     */
    public function getSuccess()
    {
        return $this->container['success'];
    }

    /**
     * Sets success
     *
     * @param  $success Indicates if the transaction is considered successful.
     *
     * @return $this
     */
    public function setSuccess($success)
    {
        $this->container['success'] = $success;

        return $this;
    }

    /**
     * Gets errors
     *
     * @return 
     */
    public function getErrors()
    {
        return $this->container['errors'];
    }

    /**
     * Sets errors
     *
     * @param  $errors A list that contains the errors occurred during the processing of transaction. This array is unbounded.
     *
     * @return $this
     */
    public function setErrors($errors)
    {
        $this->container['errors'] = $errors;

        return $this;
    }

    /**
     * Gets warnings
     *
     * @return 
     */
    public function getWarnings()
    {
        return $this->container['warnings'];
    }

    /**
     * Sets warnings
     *
     * @param  $warnings A map containing warning codes and descriptions as key/value pairs.
     *
     * @return $this
     */
    public function setWarnings($warnings)
    {
        $this->container['warnings'] = $warnings;

        return $this;
    }

    /**
     * Gets charge_info
     *
     * @return 
     */
    public function getChargeInfo()
    {
        return $this->container['charge_info'];
    }

    /**
     * Sets charge_info
     *
     * @param  $charge_info For each 1z there will exist a ChargeInfo object. These are the charges that were applied. This array is unbounded.
     *
     * @return $this
     */
    public function setChargeInfo($charge_info)
    {
        $this->container['charge_info'] = $charge_info;

        return $this;
    }

    /**
     * Gets mycagreement_upto_date
     *
     * @return 
     */
    public function getMycagreementUptoDate()
    {
        return $this->container['mycagreement_upto_date'];
    }

    /**
     * Sets mycagreement_upto_date
     *
     * @param  $mycagreement_upto_date mycagreement_upto_date
     *
     * @return $this
     */
    public function setMycagreementUptoDate($mycagreement_upto_date)
    {
        $this->container['mycagreement_upto_date'] = $mycagreement_upto_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
