<?php
/**
 * AddressInformation
 *
 * PHP version 5
 *
 * @category Class
 * @package  UPS\DeliveryIntercept
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Delivery Intercept® API
 *
 * With the UPS Delivery Intercept® API, a shipper can manage the delivery details of their shipment, prior to delivery.  # Business Values  **Key Business Values:** - elimination of manually processing customer requests - acceptance of requests later in the delivery process  <a href=\"https://developer.ups.com/api/reference/deliveryintercept/product-info\" target=\"_blank\" rel=\"noopener\">Product Info</a>  <a href=\"https://god.gw.postman.com/run-collection/29542085-f2409ef1-39c9-4f4a-a509-a3f860068ff4?action=collection%2Ffork&source=rip_markdown&collection-url=entityId%3D29542085-f2409ef1-39c9-4f4a-a509-a3f860068ff4%26entityType%3Dcollection%26workspaceId%3D7e7595f0-4829-4f9a-aee1-75c126b9d417\" target=\"_blank\" rel=\"noopener noreferrer\">   <img src=\"https://run.pstmn.io/button.svg\" alt=\"Run In Postman\" style=\"width: 128px; height: 32px;\"> </a>  # CIE Behavior  The Delivery Intercept API will return a stubbed success response if the correct data is used for a given endpoint. The static data that is valid for each of the endpoints is in the table below:  | Endpoint | transId | trackingNumber                                                                                                                                                                                              | |------------|-------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------| | /charges     | SIICharges         | 1Z4096YY0316914058 | /willcall     | SIIWillcall        | 1Z4096YY0316914058 | /return     | SIIReturn         | 1Z4096YY0316914058 | /reschedule     | SIIReschedule         | 1Z4096YY0316914058 | /redirect/address     | SIIRedirect         | 1Z4096YY0316914058 | /cancel     | SIICancel         | 1Z4096YY0316914058
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.71
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace UPS\DeliveryIntercept\DeliveryIntercept;

use \ArrayAccess;
use \UPS\DeliveryIntercept\ObjectSerializer;

/**
 * AddressInformation Class Doc Comment
 *
 * @category Class
 * @package  UPS\DeliveryIntercept
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AddressInformation implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AddressInformation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'address_line1' => '',
        'address_line2' => '',
        'address_line3' => '',
        'city' => '',
        'state' => '',
        'postal_code' => '',
        'country_code' => '',
        'building_floor' => '',
        'public_location_id' => '',
        'first_name' => '',
        'last_name' => '',
        'full_name' => '',
        'phone_number' => '',
        'activity_slic_number' => '',
        'street_address_parsed_indicator' => '',
        'parsed_street_address' => '\UPS\DeliveryIntercept\DeliveryIntercept\AddressInformationParsedStreetAddress'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'address_line1' => null,
        'address_line2' => null,
        'address_line3' => null,
        'city' => null,
        'state' => null,
        'postal_code' => null,
        'country_code' => null,
        'building_floor' => null,
        'public_location_id' => null,
        'first_name' => null,
        'last_name' => null,
        'full_name' => null,
        'phone_number' => null,
        'activity_slic_number' => null,
        'street_address_parsed_indicator' => null,
        'parsed_street_address' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'address_line1' => 'addressLine1',
        'address_line2' => 'addressLine2',
        'address_line3' => 'addressLine3',
        'city' => 'city',
        'state' => 'state',
        'postal_code' => 'postalCode',
        'country_code' => 'countryCode',
        'building_floor' => 'buildingFloor',
        'public_location_id' => 'publicLocationId',
        'first_name' => 'firstName',
        'last_name' => 'lastName',
        'full_name' => 'fullName',
        'phone_number' => 'phoneNumber',
        'activity_slic_number' => 'activitySLICNumber',
        'street_address_parsed_indicator' => 'streetAddressParsedIndicator',
        'parsed_street_address' => 'parsedStreetAddress'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'address_line1' => 'setAddressLine1',
        'address_line2' => 'setAddressLine2',
        'address_line3' => 'setAddressLine3',
        'city' => 'setCity',
        'state' => 'setState',
        'postal_code' => 'setPostalCode',
        'country_code' => 'setCountryCode',
        'building_floor' => 'setBuildingFloor',
        'public_location_id' => 'setPublicLocationId',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'full_name' => 'setFullName',
        'phone_number' => 'setPhoneNumber',
        'activity_slic_number' => 'setActivitySlicNumber',
        'street_address_parsed_indicator' => 'setStreetAddressParsedIndicator',
        'parsed_street_address' => 'setParsedStreetAddress'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'address_line1' => 'getAddressLine1',
        'address_line2' => 'getAddressLine2',
        'address_line3' => 'getAddressLine3',
        'city' => 'getCity',
        'state' => 'getState',
        'postal_code' => 'getPostalCode',
        'country_code' => 'getCountryCode',
        'building_floor' => 'getBuildingFloor',
        'public_location_id' => 'getPublicLocationId',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'full_name' => 'getFullName',
        'phone_number' => 'getPhoneNumber',
        'activity_slic_number' => 'getActivitySlicNumber',
        'street_address_parsed_indicator' => 'getStreetAddressParsedIndicator',
        'parsed_street_address' => 'getParsedStreetAddress'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['address_line1'] = isset($data['address_line1']) ? $data['address_line1'] : null;
        $this->container['address_line2'] = isset($data['address_line2']) ? $data['address_line2'] : null;
        $this->container['address_line3'] = isset($data['address_line3']) ? $data['address_line3'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['postal_code'] = isset($data['postal_code']) ? $data['postal_code'] : null;
        $this->container['country_code'] = isset($data['country_code']) ? $data['country_code'] : null;
        $this->container['building_floor'] = isset($data['building_floor']) ? $data['building_floor'] : null;
        $this->container['public_location_id'] = isset($data['public_location_id']) ? $data['public_location_id'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : null;
        $this->container['full_name'] = isset($data['full_name']) ? $data['full_name'] : null;
        $this->container['phone_number'] = isset($data['phone_number']) ? $data['phone_number'] : null;
        $this->container['activity_slic_number'] = isset($data['activity_slic_number']) ? $data['activity_slic_number'] : null;
        $this->container['street_address_parsed_indicator'] = isset($data['street_address_parsed_indicator']) ? $data['street_address_parsed_indicator'] : null;
        $this->container['parsed_street_address'] = isset($data['parsed_street_address']) ? $data['parsed_street_address'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['city'] === null) {
            $invalidProperties[] = "'city' can't be null";
        }
        if ($this->container['country_code'] === null) {
            $invalidProperties[] = "'country_code' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets address_line1
     *
     * @return 
     */
    public function getAddressLine1()
    {
        return $this->container['address_line1'];
    }

    /**
     * Sets address_line1
     *
     * @param  $address_line1 Line 1 of the street address. Required if streetAddressParsedIndicator is FALSE; Required when setting Billing Address.
     *
     * @return $this
     */
    public function setAddressLine1($address_line1)
    {
        $this->container['address_line1'] = $address_line1;

        return $this;
    }

    /**
     * Gets address_line2
     *
     * @return 
     */
    public function getAddressLine2()
    {
        return $this->container['address_line2'];
    }

    /**
     * Sets address_line2
     *
     * @param  $address_line2 Line 2 of the street address
     *
     * @return $this
     */
    public function setAddressLine2($address_line2)
    {
        $this->container['address_line2'] = $address_line2;

        return $this;
    }

    /**
     * Gets address_line3
     *
     * @return 
     */
    public function getAddressLine3()
    {
        return $this->container['address_line3'];
    }

    /**
     * Sets address_line3
     *
     * @param  $address_line3 Line 3 of the street
     *
     * @return $this
     */
    public function setAddressLine3($address_line3)
    {
        $this->container['address_line3'] = $address_line3;

        return $this;
    }

    /**
     * Gets city
     *
     * @return 
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param  $city The city name of the address
     *
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets state
     *
     * @return 
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param  $state The state code of the address
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets postal_code
     *
     * @return 
     */
    public function getPostalCode()
    {
        return $this->container['postal_code'];
    }

    /**
     * Sets postal_code
     *
     * @param  $postal_code The postal code of the address (should be provided for postal countries)
     *
     * @return $this
     */
    public function setPostalCode($postal_code)
    {
        $this->container['postal_code'] = $postal_code;

        return $this;
    }

    /**
     * Gets country_code
     *
     * @return 
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     *
     * @param  $country_code The ISO country code of the address
     *
     * @return $this
     */
    public function setCountryCode($country_code)
    {
        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets building_floor
     *
     * @return 
     */
    public function getBuildingFloor()
    {
        return $this->container['building_floor'];
    }

    /**
     * Sets building_floor
     *
     * @param  $building_floor building_floor
     *
     * @return $this
     */
    public function setBuildingFloor($building_floor)
    {
        $this->container['building_floor'] = $building_floor;

        return $this;
    }

    /**
     * Gets public_location_id
     *
     * @return 
     */
    public function getPublicLocationId()
    {
        return $this->container['public_location_id'];
    }

    /**
     * Sets public_location_id
     *
     * @param  $public_location_id public_location_id
     *
     * @return $this
     */
    public function setPublicLocationId($public_location_id)
    {
        $this->container['public_location_id'] = $public_location_id;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return 
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param  $first_name Required when the user choses to enter a new card providing the Billing address in CreditCardInformation .
     *
     * @return $this
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return 
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param  $last_name Required when the user choses to enter a new card providing the Billing address in CreditCardInformation object.
     *
     * @return $this
     */
    public function setLastName($last_name)
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets full_name
     *
     * @return 
     */
    public function getFullName()
    {
        return $this->container['full_name'];
    }

    /**
     * Sets full_name
     *
     * @param  $full_name Full person name
     *
     * @return $this
     */
    public function setFullName($full_name)
    {
        $this->container['full_name'] = $full_name;

        return $this;
    }

    /**
     * Gets phone_number
     *
     * @return 
     */
    public function getPhoneNumber()
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     *
     * @param  $phone_number phone_number
     *
     * @return $this
     */
    public function setPhoneNumber($phone_number)
    {
        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets activity_slic_number
     *
     * @return 
     */
    public function getActivitySlicNumber()
    {
        return $this->container['activity_slic_number'];
    }

    /**
     * Sets activity_slic_number
     *
     * @param  $activity_slic_number When provided, the Will Call center lookup will be done using this identifier. The lookup will only be done using the postalCode when this field is blank.
     *
     * @return $this
     */
    public function setActivitySlicNumber($activity_slic_number)
    {
        $this->container['activity_slic_number'] = $activity_slic_number;

        return $this;
    }

    /**
     * Gets street_address_parsed_indicator
     *
     * @return 
     */
    public function getStreetAddressParsedIndicator()
    {
        return $this->container['street_address_parsed_indicator'];
    }

    /**
     * Sets street_address_parsed_indicator
     *
     * @param  $street_address_parsed_indicator Set it to true when clients send in parsed street address for redirects.
     *
     * @return $this
     */
    public function setStreetAddressParsedIndicator($street_address_parsed_indicator)
    {
        $this->container['street_address_parsed_indicator'] = $street_address_parsed_indicator;

        return $this;
    }

    /**
     * Gets parsed_street_address
     *
     * @return \UPS\DeliveryIntercept\DeliveryIntercept\AddressInformationParsedStreetAddress
     */
    public function getParsedStreetAddress()
    {
        return $this->container['parsed_street_address'];
    }

    /**
     * Sets parsed_street_address
     *
     * @param \UPS\DeliveryIntercept\DeliveryIntercept\AddressInformationParsedStreetAddress $parsed_street_address parsed_street_address
     *
     * @return $this
     */
    public function setParsedStreetAddress($parsed_street_address)
    {
        $this->container['parsed_street_address'] = $parsed_street_address;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
