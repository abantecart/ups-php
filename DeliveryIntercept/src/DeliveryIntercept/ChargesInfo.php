<?php
/**
 * ChargesInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  UPS\DeliveryIntercept
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Delivery Intercept® API
 *
 * With the UPS Delivery Intercept® API, a shipper can manage the delivery details of their shipment, prior to delivery.  # Business Values  **Key Business Values:** - elimination of manually processing customer requests - acceptance of requests later in the delivery process  <a href=\"https://developer.ups.com/api/reference/deliveryintercept/product-info\" target=\"_blank\" rel=\"noopener\">Product Info</a>  <a href=\"https://god.gw.postman.com/run-collection/29542085-f2409ef1-39c9-4f4a-a509-a3f860068ff4?action=collection%2Ffork&source=rip_markdown&collection-url=entityId%3D29542085-f2409ef1-39c9-4f4a-a509-a3f860068ff4%26entityType%3Dcollection%26workspaceId%3D7e7595f0-4829-4f9a-aee1-75c126b9d417\" target=\"_blank\" rel=\"noopener noreferrer\">   <img src=\"https://run.pstmn.io/button.svg\" alt=\"Run In Postman\" style=\"width: 128px; height: 32px;\"> </a>  # CIE Behavior  The Delivery Intercept API will return a stubbed success response if the correct data is used for a given endpoint. The static data that is valid for each of the endpoints is in the table below:  | Endpoint | transId | trackingNumber                                                                                                                                                                                              | |------------|-------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------| | /charges     | SIICharges         | 1Z4096YY0316914058 | /willcall     | SIIWillcall        | 1Z4096YY0316914058 | /return     | SIIReturn         | 1Z4096YY0316914058 | /reschedule     | SIIReschedule         | 1Z4096YY0316914058 | /redirect/address     | SIIRedirect         | 1Z4096YY0316914058 | /cancel     | SIICancel         | 1Z4096YY0316914058
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.71
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace UPS\DeliveryIntercept\DeliveryIntercept;

use \ArrayAccess;
use \UPS\DeliveryIntercept\ObjectSerializer;

/**
 * ChargesInfo Class Doc Comment
 *
 * @category Class
 * @package  UPS\DeliveryIntercept
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ChargesInfo implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ChargesInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'accessorial_charge' => '',
        'intercept_charge' => '',
        'transportation_charge' => '',
        'total_charge' => '',
        'charge_currency' => '',
        'est_delivery_date' => '',
        'residential_indicator' => '',
        'additional_handling_indicator' => '',
        'downgrade_service_code' => '',
        'oversize_code' => '',
        'service_code' => '',
        'service_desc' => '',
        'package_weight' => '',
        'package_weight_uom' => '',
        'packaging_type' => '',
        'tracking_number' => '',
        'shipper_name' => '',
        'display_shipper_paid_intercept_charges' => '',
        'shipper_paid_intercept_charges' => '',
        'shipper_paid_transportation_charges' => '',
        'display_shipper_paid_transportation_charges' => '',
        'charges_paid_by_third_party_shipper' => '',
        'taxes' => '',
        'total_tax' => '',
        'pre_tax_total_charge' => '',
        'tax_disclaimer_indicator' => ''
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'accessorial_charge' => null,
        'intercept_charge' => null,
        'transportation_charge' => null,
        'total_charge' => null,
        'charge_currency' => null,
        'est_delivery_date' => null,
        'residential_indicator' => null,
        'additional_handling_indicator' => null,
        'downgrade_service_code' => null,
        'oversize_code' => null,
        'service_code' => null,
        'service_desc' => null,
        'package_weight' => null,
        'package_weight_uom' => null,
        'packaging_type' => null,
        'tracking_number' => null,
        'shipper_name' => null,
        'display_shipper_paid_intercept_charges' => null,
        'shipper_paid_intercept_charges' => null,
        'shipper_paid_transportation_charges' => null,
        'display_shipper_paid_transportation_charges' => null,
        'charges_paid_by_third_party_shipper' => null,
        'taxes' => null,
        'total_tax' => null,
        'pre_tax_total_charge' => null,
        'tax_disclaimer_indicator' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'accessorial_charge' => 'accessorialCharge',
        'intercept_charge' => 'interceptCharge',
        'transportation_charge' => 'transportationCharge',
        'total_charge' => 'totalCharge',
        'charge_currency' => 'chargeCurrency',
        'est_delivery_date' => 'estDeliveryDate',
        'residential_indicator' => 'residentialIndicator',
        'additional_handling_indicator' => 'additionalHandlingIndicator',
        'downgrade_service_code' => 'downgradeServiceCode',
        'oversize_code' => 'oversizeCode',
        'service_code' => 'serviceCode',
        'service_desc' => 'serviceDesc',
        'package_weight' => 'packageWeight',
        'package_weight_uom' => 'packageWeightUOM',
        'packaging_type' => 'packagingType',
        'tracking_number' => 'trackingNumber',
        'shipper_name' => 'shipperName',
        'display_shipper_paid_intercept_charges' => 'displayShipperPaidInterceptCharges',
        'shipper_paid_intercept_charges' => 'shipperPaidInterceptCharges',
        'shipper_paid_transportation_charges' => 'shipperPaidTransportationCharges',
        'display_shipper_paid_transportation_charges' => 'displayShipperPaidTransportationCharges',
        'charges_paid_by_third_party_shipper' => 'chargesPaidByThirdPartyShipper',
        'taxes' => 'taxes',
        'total_tax' => 'totalTax',
        'pre_tax_total_charge' => 'preTaxTotalCharge',
        'tax_disclaimer_indicator' => 'taxDisclaimerIndicator'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'accessorial_charge' => 'setAccessorialCharge',
        'intercept_charge' => 'setInterceptCharge',
        'transportation_charge' => 'setTransportationCharge',
        'total_charge' => 'setTotalCharge',
        'charge_currency' => 'setChargeCurrency',
        'est_delivery_date' => 'setEstDeliveryDate',
        'residential_indicator' => 'setResidentialIndicator',
        'additional_handling_indicator' => 'setAdditionalHandlingIndicator',
        'downgrade_service_code' => 'setDowngradeServiceCode',
        'oversize_code' => 'setOversizeCode',
        'service_code' => 'setServiceCode',
        'service_desc' => 'setServiceDesc',
        'package_weight' => 'setPackageWeight',
        'package_weight_uom' => 'setPackageWeightUom',
        'packaging_type' => 'setPackagingType',
        'tracking_number' => 'setTrackingNumber',
        'shipper_name' => 'setShipperName',
        'display_shipper_paid_intercept_charges' => 'setDisplayShipperPaidInterceptCharges',
        'shipper_paid_intercept_charges' => 'setShipperPaidInterceptCharges',
        'shipper_paid_transportation_charges' => 'setShipperPaidTransportationCharges',
        'display_shipper_paid_transportation_charges' => 'setDisplayShipperPaidTransportationCharges',
        'charges_paid_by_third_party_shipper' => 'setChargesPaidByThirdPartyShipper',
        'taxes' => 'setTaxes',
        'total_tax' => 'setTotalTax',
        'pre_tax_total_charge' => 'setPreTaxTotalCharge',
        'tax_disclaimer_indicator' => 'setTaxDisclaimerIndicator'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'accessorial_charge' => 'getAccessorialCharge',
        'intercept_charge' => 'getInterceptCharge',
        'transportation_charge' => 'getTransportationCharge',
        'total_charge' => 'getTotalCharge',
        'charge_currency' => 'getChargeCurrency',
        'est_delivery_date' => 'getEstDeliveryDate',
        'residential_indicator' => 'getResidentialIndicator',
        'additional_handling_indicator' => 'getAdditionalHandlingIndicator',
        'downgrade_service_code' => 'getDowngradeServiceCode',
        'oversize_code' => 'getOversizeCode',
        'service_code' => 'getServiceCode',
        'service_desc' => 'getServiceDesc',
        'package_weight' => 'getPackageWeight',
        'package_weight_uom' => 'getPackageWeightUom',
        'packaging_type' => 'getPackagingType',
        'tracking_number' => 'getTrackingNumber',
        'shipper_name' => 'getShipperName',
        'display_shipper_paid_intercept_charges' => 'getDisplayShipperPaidInterceptCharges',
        'shipper_paid_intercept_charges' => 'getShipperPaidInterceptCharges',
        'shipper_paid_transportation_charges' => 'getShipperPaidTransportationCharges',
        'display_shipper_paid_transportation_charges' => 'getDisplayShipperPaidTransportationCharges',
        'charges_paid_by_third_party_shipper' => 'getChargesPaidByThirdPartyShipper',
        'taxes' => 'getTaxes',
        'total_tax' => 'getTotalTax',
        'pre_tax_total_charge' => 'getPreTaxTotalCharge',
        'tax_disclaimer_indicator' => 'getTaxDisclaimerIndicator'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['accessorial_charge'] = isset($data['accessorial_charge']) ? $data['accessorial_charge'] : null;
        $this->container['intercept_charge'] = isset($data['intercept_charge']) ? $data['intercept_charge'] : null;
        $this->container['transportation_charge'] = isset($data['transportation_charge']) ? $data['transportation_charge'] : null;
        $this->container['total_charge'] = isset($data['total_charge']) ? $data['total_charge'] : null;
        $this->container['charge_currency'] = isset($data['charge_currency']) ? $data['charge_currency'] : null;
        $this->container['est_delivery_date'] = isset($data['est_delivery_date']) ? $data['est_delivery_date'] : null;
        $this->container['residential_indicator'] = isset($data['residential_indicator']) ? $data['residential_indicator'] : null;
        $this->container['additional_handling_indicator'] = isset($data['additional_handling_indicator']) ? $data['additional_handling_indicator'] : null;
        $this->container['downgrade_service_code'] = isset($data['downgrade_service_code']) ? $data['downgrade_service_code'] : null;
        $this->container['oversize_code'] = isset($data['oversize_code']) ? $data['oversize_code'] : null;
        $this->container['service_code'] = isset($data['service_code']) ? $data['service_code'] : null;
        $this->container['service_desc'] = isset($data['service_desc']) ? $data['service_desc'] : null;
        $this->container['package_weight'] = isset($data['package_weight']) ? $data['package_weight'] : null;
        $this->container['package_weight_uom'] = isset($data['package_weight_uom']) ? $data['package_weight_uom'] : null;
        $this->container['packaging_type'] = isset($data['packaging_type']) ? $data['packaging_type'] : null;
        $this->container['tracking_number'] = isset($data['tracking_number']) ? $data['tracking_number'] : null;
        $this->container['shipper_name'] = isset($data['shipper_name']) ? $data['shipper_name'] : null;
        $this->container['display_shipper_paid_intercept_charges'] = isset($data['display_shipper_paid_intercept_charges']) ? $data['display_shipper_paid_intercept_charges'] : null;
        $this->container['shipper_paid_intercept_charges'] = isset($data['shipper_paid_intercept_charges']) ? $data['shipper_paid_intercept_charges'] : null;
        $this->container['shipper_paid_transportation_charges'] = isset($data['shipper_paid_transportation_charges']) ? $data['shipper_paid_transportation_charges'] : null;
        $this->container['display_shipper_paid_transportation_charges'] = isset($data['display_shipper_paid_transportation_charges']) ? $data['display_shipper_paid_transportation_charges'] : null;
        $this->container['charges_paid_by_third_party_shipper'] = isset($data['charges_paid_by_third_party_shipper']) ? $data['charges_paid_by_third_party_shipper'] : null;
        $this->container['taxes'] = isset($data['taxes']) ? $data['taxes'] : null;
        $this->container['total_tax'] = isset($data['total_tax']) ? $data['total_tax'] : null;
        $this->container['pre_tax_total_charge'] = isset($data['pre_tax_total_charge']) ? $data['pre_tax_total_charge'] : null;
        $this->container['tax_disclaimer_indicator'] = isset($data['tax_disclaimer_indicator']) ? $data['tax_disclaimer_indicator'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['charge_currency'] === null) {
            $invalidProperties[] = "'charge_currency' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets accessorial_charge
     *
     * @return 
     */
    public function getAccessorialCharge()
    {
        return $this->container['accessorial_charge'];
    }

    /**
     * Sets accessorial_charge
     *
     * @param  $accessorial_charge Includes sum of all accessorial charges (i.e. including addition handling, intercept).
     *
     * @return $this
     */
    public function setAccessorialCharge($accessorial_charge)
    {
        $this->container['accessorial_charge'] = $accessorial_charge;

        return $this;
    }

    /**
     * Gets intercept_charge
     *
     * @return 
     */
    public function getInterceptCharge()
    {
        return $this->container['intercept_charge'];
    }

    /**
     * Sets intercept_charge
     *
     * @param  $intercept_charge The flat rate charge specific for the intercept.
     *
     * @return $this
     */
    public function setInterceptCharge($intercept_charge)
    {
        $this->container['intercept_charge'] = $intercept_charge;

        return $this;
    }

    /**
     * Gets transportation_charge
     *
     * @return 
     */
    public function getTransportationCharge()
    {
        return $this->container['transportation_charge'];
    }

    /**
     * Sets transportation_charge
     *
     * @param  $transportation_charge Transportation Charge only for AlternateAddress(Redirect,deliver to another address).
     *
     * @return $this
     */
    public function setTransportationCharge($transportation_charge)
    {
        $this->container['transportation_charge'] = $transportation_charge;

        return $this;
    }

    /**
     * Gets total_charge
     *
     * @return 
     */
    public function getTotalCharge()
    {
        return $this->container['total_charge'];
    }

    /**
     * Sets total_charge
     *
     * @param  $total_charge Total charges
     *
     * @return $this
     */
    public function setTotalCharge($total_charge)
    {
        $this->container['total_charge'] = $total_charge;

        return $this;
    }

    /**
     * Gets charge_currency
     *
     * @return 
     */
    public function getChargeCurrency()
    {
        return $this->container['charge_currency'];
    }

    /**
     * Sets charge_currency
     *
     * @param  $charge_currency Charge Currency
     *
     * @return $this
     */
    public function setChargeCurrency($charge_currency)
    {
        $this->container['charge_currency'] = $charge_currency;

        return $this;
    }

    /**
     * Gets est_delivery_date
     *
     * @return 
     */
    public function getEstDeliveryDate()
    {
        return $this->container['est_delivery_date'];
    }

    /**
     * Sets est_delivery_date
     *
     * @param  $est_delivery_date Estimate Delivery Date (YYYYMMDD).
     *
     * @return $this
     */
    public function setEstDeliveryDate($est_delivery_date)
    {
        $this->container['est_delivery_date'] = $est_delivery_date;

        return $this;
    }

    /**
     * Gets residential_indicator
     *
     * @return 
     */
    public function getResidentialIndicator()
    {
        return $this->container['residential_indicator'];
    }

    /**
     * Sets residential_indicator
     *
     * @param  $residential_indicator Ship to residential indicator.
     *
     * @return $this
     */
    public function setResidentialIndicator($residential_indicator)
    {
        $this->container['residential_indicator'] = $residential_indicator;

        return $this;
    }

    /**
     * Gets additional_handling_indicator
     *
     * @return 
     */
    public function getAdditionalHandlingIndicator()
    {
        return $this->container['additional_handling_indicator'];
    }

    /**
     * Sets additional_handling_indicator
     *
     * @param  $additional_handling_indicator Additional handling indicator. May be set by NRF during rating.
     *
     * @return $this
     */
    public function setAdditionalHandlingIndicator($additional_handling_indicator)
    {
        $this->container['additional_handling_indicator'] = $additional_handling_indicator;

        return $this;
    }

    /**
     * Gets downgrade_service_code
     *
     * @return 
     */
    public function getDowngradeServiceCode()
    {
        return $this->container['downgrade_service_code'];
    }

    /**
     * Sets downgrade_service_code
     *
     * @param  $downgrade_service_code Downgraded service code.
     *
     * @return $this
     */
    public function setDowngradeServiceCode($downgrade_service_code)
    {
        $this->container['downgrade_service_code'] = $downgrade_service_code;

        return $this;
    }

    /**
     * Gets oversize_code
     *
     * @return 
     */
    public function getOversizeCode()
    {
        return $this->container['oversize_code'];
    }

    /**
     * Sets oversize_code
     *
     * @param  $oversize_code Oversize indicator. May be set by NRF during rating LPK.
     *
     * @return $this
     */
    public function setOversizeCode($oversize_code)
    {
        $this->container['oversize_code'] = $oversize_code;

        return $this;
    }

    /**
     * Gets service_code
     *
     * @return 
     */
    public function getServiceCode()
    {
        return $this->container['service_code'];
    }

    /**
     * Sets service_code
     *
     * @param  $service_code Original service code.
     *
     * @return $this
     */
    public function setServiceCode($service_code)
    {
        $this->container['service_code'] = $service_code;

        return $this;
    }

    /**
     * Gets service_desc
     *
     * @return 
     */
    public function getServiceDesc()
    {
        return $this->container['service_desc'];
    }

    /**
     * Sets service_desc
     *
     * @param  $service_desc Original service description.
     *
     * @return $this
     */
    public function setServiceDesc($service_desc)
    {
        $this->container['service_desc'] = $service_desc;

        return $this;
    }

    /**
     * Gets package_weight
     *
     * @return 
     */
    public function getPackageWeight()
    {
        return $this->container['package_weight'];
    }

    /**
     * Sets package_weight
     *
     * @param  $package_weight Package weight. May also be changed by NRF during rating to billable weight.
     *
     * @return $this
     */
    public function setPackageWeight($package_weight)
    {
        $this->container['package_weight'] = $package_weight;

        return $this;
    }

    /**
     * Gets package_weight_uom
     *
     * @return 
     */
    public function getPackageWeightUom()
    {
        return $this->container['package_weight_uom'];
    }

    /**
     * Sets package_weight_uom
     *
     * @param  $package_weight_uom Weight unit of measureLBS - pounds, KGS - Kilograms
     *
     * @return $this
     */
    public function setPackageWeightUom($package_weight_uom)
    {
        $this->container['package_weight_uom'] = $package_weight_uom;

        return $this;
    }

    /**
     * Gets packaging_type
     *
     * @return 
     */
    public function getPackagingType()
    {
        return $this->container['packaging_type'];
    }

    /**
     * Sets packaging_type
     *
     * @param  $packaging_type Packaging Type code.
     *
     * @return $this
     */
    public function setPackagingType($packaging_type)
    {
        $this->container['packaging_type'] = $packaging_type;

        return $this;
    }

    /**
     * Gets tracking_number
     *
     * @return 
     */
    public function getTrackingNumber()
    {
        return $this->container['tracking_number'];
    }

    /**
     * Sets tracking_number
     *
     * @param  $tracking_number Tracking Number
     *
     * @return $this
     */
    public function setTrackingNumber($tracking_number)
    {
        $this->container['tracking_number'] = $tracking_number;

        return $this;
    }

    /**
     * Gets shipper_name
     *
     * @return 
     */
    public function getShipperName()
    {
        return $this->container['shipper_name'];
    }

    /**
     * Sets shipper_name
     *
     * @param  $shipper_name Name of the shipper Applicable for  Intercept options FD,AA,UR etc.
     *
     * @return $this
     */
    public function setShipperName($shipper_name)
    {
        $this->container['shipper_name'] = $shipper_name;

        return $this;
    }

    /**
     * Gets display_shipper_paid_intercept_charges
     *
     * @return 
     */
    public function getDisplayShipperPaidInterceptCharges()
    {
        return $this->container['display_shipper_paid_intercept_charges'];
    }

    /**
     * Sets display_shipper_paid_intercept_charges
     *
     * @param  $display_shipper_paid_intercept_charges Indicates if a message should be displayed that the shipper has paid for the charges related to the intercept.
     *
     * @return $this
     */
    public function setDisplayShipperPaidInterceptCharges($display_shipper_paid_intercept_charges)
    {
        $this->container['display_shipper_paid_intercept_charges'] = $display_shipper_paid_intercept_charges;

        return $this;
    }

    /**
     * Gets shipper_paid_intercept_charges
     *
     * @return 
     */
    public function getShipperPaidInterceptCharges()
    {
        return $this->container['shipper_paid_intercept_charges'];
    }

    /**
     * Sets shipper_paid_intercept_charges
     *
     * @param  $shipper_paid_intercept_charges Indicates if charges related to the intercept are paid by the shipper.
     *
     * @return $this
     */
    public function setShipperPaidInterceptCharges($shipper_paid_intercept_charges)
    {
        $this->container['shipper_paid_intercept_charges'] = $shipper_paid_intercept_charges;

        return $this;
    }

    /**
     * Gets shipper_paid_transportation_charges
     *
     * @return 
     */
    public function getShipperPaidTransportationCharges()
    {
        return $this->container['shipper_paid_transportation_charges'];
    }

    /**
     * Sets shipper_paid_transportation_charges
     *
     * @param  $shipper_paid_transportation_charges Indicates if charges related to transportation are paid by the shipper. Applicable only for Redirect to Another Address.
     *
     * @return $this
     */
    public function setShipperPaidTransportationCharges($shipper_paid_transportation_charges)
    {
        $this->container['shipper_paid_transportation_charges'] = $shipper_paid_transportation_charges;

        return $this;
    }

    /**
     * Gets display_shipper_paid_transportation_charges
     *
     * @return 
     */
    public function getDisplayShipperPaidTransportationCharges()
    {
        return $this->container['display_shipper_paid_transportation_charges'];
    }

    /**
     * Sets display_shipper_paid_transportation_charges
     *
     * @param  $display_shipper_paid_transportation_charges Indicates if a message should be displayed that the shipper has paid for the charges related to transportation. Applicable only for Redirect to Another Address and Redirect to UPS Location intercepts. TRUE - display a message that the shipper has paid the transportation charges.
     *
     * @return $this
     */
    public function setDisplayShipperPaidTransportationCharges($display_shipper_paid_transportation_charges)
    {
        $this->container['display_shipper_paid_transportation_charges'] = $display_shipper_paid_transportation_charges;

        return $this;
    }

    /**
     * Gets charges_paid_by_third_party_shipper
     *
     * @return 
     */
    public function getChargesPaidByThirdPartyShipper()
    {
        return $this->container['charges_paid_by_third_party_shipper'];
    }

    /**
     * Sets charges_paid_by_third_party_shipper
     *
     * @param  $charges_paid_by_third_party_shipper Indicates if the charges were paid by a third-party shipper and must be supplied by trusted end clients only.  | CODE  | DESCRIPTION                                     | | TRUE  | the charges were paid by a third-party shipper. | | FALSE | the charges were paid by the original shipper.  |
     *
     * @return $this
     */
    public function setChargesPaidByThirdPartyShipper($charges_paid_by_third_party_shipper)
    {
        $this->container['charges_paid_by_third_party_shipper'] = $charges_paid_by_third_party_shipper;

        return $this;
    }

    /**
     * Gets taxes
     *
     * @return 
     */
    public function getTaxes()
    {
        return $this->container['taxes'];
    }

    /**
     * Sets taxes
     *
     * @param  $taxes Taxes for EU/Mexico/Canada  country  movement. This array is unbounded.
     *
     * @return $this
     */
    public function setTaxes($taxes)
    {
        $this->container['taxes'] = $taxes;

        return $this;
    }

    /**
     * Gets total_tax
     *
     * @return 
     */
    public function getTotalTax()
    {
        return $this->container['total_tax'];
    }

    /**
     * Sets total_tax
     *
     * @param  $total_tax Taxes for EU/Mexico/Canada country movement . sum of tax amounts present in the taxes field.
     *
     * @return $this
     */
    public function setTotalTax($total_tax)
    {
        $this->container['total_tax'] = $total_tax;

        return $this;
    }

    /**
     * Gets pre_tax_total_charge
     *
     * @return 
     */
    public function getPreTaxTotalCharge()
    {
        return $this->container['pre_tax_total_charge'];
    }

    /**
     * Sets pre_tax_total_charge
     *
     * @param  $pre_tax_total_charge Pre-tax total Charge. Sum of accessorial charges and transportation charges  excluding taxes.
     *
     * @return $this
     */
    public function setPreTaxTotalCharge($pre_tax_total_charge)
    {
        $this->container['pre_tax_total_charge'] = $pre_tax_total_charge;

        return $this;
    }

    /**
     * Gets tax_disclaimer_indicator
     *
     * @return 
     */
    public function getTaxDisclaimerIndicator()
    {
        return $this->container['tax_disclaimer_indicator'];
    }

    /**
     * Sets tax_disclaimer_indicator
     *
     * @param  $tax_disclaimer_indicator Indicates if a tax disclaimer message should be displayed.  | VALUE | DESCRIPTION         | | :--:  | :--                 | | NTC   | NO Tax calculation  |  | NTA   | NO Tax applicable   |  | TA    | Taxes applicable    | | TE    | Taxes exempt        | | TU    | Taxes Undermined    |
     *
     * @return $this
     */
    public function setTaxDisclaimerIndicator($tax_disclaimer_indicator)
    {
        $this->container['tax_disclaimer_indicator'] = $tax_disclaimer_indicator;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
