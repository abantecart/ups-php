<?php
/**
 * PaymentContainerCreditCardInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  UPS\DeliveryIntercept
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Delivery Intercept® API
 *
 * With the UPS Delivery Intercept® API, a shipper can manage the delivery details of their shipment, prior to delivery.  # Business Values  **Key Business Values:** - elimination of manually processing customer requests - acceptance of requests later in the delivery process  <a href=\"https://developer.ups.com/api/reference/deliveryintercept/product-info\" target=\"_blank\" rel=\"noopener\">Product Info</a>  <a href=\"https://god.gw.postman.com/run-collection/29542085-f2409ef1-39c9-4f4a-a509-a3f860068ff4?action=collection%2Ffork&source=rip_markdown&collection-url=entityId%3D29542085-f2409ef1-39c9-4f4a-a509-a3f860068ff4%26entityType%3Dcollection%26workspaceId%3D7e7595f0-4829-4f9a-aee1-75c126b9d417\" target=\"_blank\" rel=\"noopener noreferrer\">   <img src=\"https://run.pstmn.io/button.svg\" alt=\"Run In Postman\" style=\"width: 128px; height: 32px;\"> </a>  # CIE Behavior  The Delivery Intercept API will return a stubbed success response if the correct data is used for a given endpoint. The static data that is valid for each of the endpoints is in the table below:  | Endpoint | transId | trackingNumber                                                                                                                                                                                              | |------------|-------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------| | /charges     | SIICharges         | 1Z4096YY0316914058 | /willcall     | SIIWillcall        | 1Z4096YY0316914058 | /return     | SIIReturn         | 1Z4096YY0316914058 | /reschedule     | SIIReschedule         | 1Z4096YY0316914058 | /redirect/address     | SIIRedirect         | 1Z4096YY0316914058 | /cancel     | SIICancel         | 1Z4096YY0316914058
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.71
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace UPS\DeliveryIntercept\DeliveryIntercept;

use \ArrayAccess;
use \UPS\DeliveryIntercept\ObjectSerializer;

/**
 * PaymentContainerCreditCardInfo Class Doc Comment
 *
 * @category Class
 * @package  UPS\DeliveryIntercept
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PaymentContainerCreditCardInfo implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PaymentContainer_creditCardInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'billing_address' => '\UPS\DeliveryIntercept\DeliveryIntercept\AddressInformation',
        'platform_type' => '',
        'currency_code' => '',
        'iobb' => '',
        'default_account' => '',
        'displayable_number' => '',
        'amount' => '',
        'account_name' => '',
        'guid_code' => '',
        'tokenized_account_number' => '',
        'card_type' => '',
        'expire_year' => '',
        'expire_month' => '',
        'saved_card' => '',
        'verification_code' => '',
        'token_obj' => '\UPS\DeliveryIntercept\DeliveryIntercept\PaymentContainerCreditCardInfoTokenObj',
        'security_code_validated' => '',
        'ups_account_number' => '',
        'payment_token_flag' => '',
        'card_holder_name' => ''
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'billing_address' => null,
        'platform_type' => null,
        'currency_code' => null,
        'iobb' => null,
        'default_account' => null,
        'displayable_number' => null,
        'amount' => 'int64',
        'account_name' => null,
        'guid_code' => null,
        'tokenized_account_number' => null,
        'card_type' => null,
        'expire_year' => null,
        'expire_month' => null,
        'saved_card' => null,
        'verification_code' => null,
        'token_obj' => null,
        'security_code_validated' => null,
        'ups_account_number' => null,
        'payment_token_flag' => null,
        'card_holder_name' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'billing_address' => 'billingAddress',
        'platform_type' => 'platformType',
        'currency_code' => 'currencyCode',
        'iobb' => 'iobb',
        'default_account' => 'defaultAccount',
        'displayable_number' => 'displayableNumber',
        'amount' => 'amount',
        'account_name' => 'accountName',
        'guid_code' => 'guidCode',
        'tokenized_account_number' => 'tokenizedAccountNumber',
        'card_type' => 'cardType',
        'expire_year' => 'expireYear',
        'expire_month' => 'expireMonth',
        'saved_card' => 'savedCard',
        'verification_code' => 'verificationCode',
        'token_obj' => 'tokenObj',
        'security_code_validated' => 'securityCodeValidated',
        'ups_account_number' => 'upsAccountNumber',
        'payment_token_flag' => 'paymentTokenFlag',
        'card_holder_name' => 'cardHolderName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'billing_address' => 'setBillingAddress',
        'platform_type' => 'setPlatformType',
        'currency_code' => 'setCurrencyCode',
        'iobb' => 'setIobb',
        'default_account' => 'setDefaultAccount',
        'displayable_number' => 'setDisplayableNumber',
        'amount' => 'setAmount',
        'account_name' => 'setAccountName',
        'guid_code' => 'setGuidCode',
        'tokenized_account_number' => 'setTokenizedAccountNumber',
        'card_type' => 'setCardType',
        'expire_year' => 'setExpireYear',
        'expire_month' => 'setExpireMonth',
        'saved_card' => 'setSavedCard',
        'verification_code' => 'setVerificationCode',
        'token_obj' => 'setTokenObj',
        'security_code_validated' => 'setSecurityCodeValidated',
        'ups_account_number' => 'setUpsAccountNumber',
        'payment_token_flag' => 'setPaymentTokenFlag',
        'card_holder_name' => 'setCardHolderName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'billing_address' => 'getBillingAddress',
        'platform_type' => 'getPlatformType',
        'currency_code' => 'getCurrencyCode',
        'iobb' => 'getIobb',
        'default_account' => 'getDefaultAccount',
        'displayable_number' => 'getDisplayableNumber',
        'amount' => 'getAmount',
        'account_name' => 'getAccountName',
        'guid_code' => 'getGuidCode',
        'tokenized_account_number' => 'getTokenizedAccountNumber',
        'card_type' => 'getCardType',
        'expire_year' => 'getExpireYear',
        'expire_month' => 'getExpireMonth',
        'saved_card' => 'getSavedCard',
        'verification_code' => 'getVerificationCode',
        'token_obj' => 'getTokenObj',
        'security_code_validated' => 'getSecurityCodeValidated',
        'ups_account_number' => 'getUpsAccountNumber',
        'payment_token_flag' => 'getPaymentTokenFlag',
        'card_holder_name' => 'getCardHolderName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['billing_address'] = isset($data['billing_address']) ? $data['billing_address'] : null;
        $this->container['platform_type'] = isset($data['platform_type']) ? $data['platform_type'] : null;
        $this->container['currency_code'] = isset($data['currency_code']) ? $data['currency_code'] : null;
        $this->container['iobb'] = isset($data['iobb']) ? $data['iobb'] : null;
        $this->container['default_account'] = isset($data['default_account']) ? $data['default_account'] : null;
        $this->container['displayable_number'] = isset($data['displayable_number']) ? $data['displayable_number'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['account_name'] = isset($data['account_name']) ? $data['account_name'] : null;
        $this->container['guid_code'] = isset($data['guid_code']) ? $data['guid_code'] : null;
        $this->container['tokenized_account_number'] = isset($data['tokenized_account_number']) ? $data['tokenized_account_number'] : null;
        $this->container['card_type'] = isset($data['card_type']) ? $data['card_type'] : null;
        $this->container['expire_year'] = isset($data['expire_year']) ? $data['expire_year'] : null;
        $this->container['expire_month'] = isset($data['expire_month']) ? $data['expire_month'] : null;
        $this->container['saved_card'] = isset($data['saved_card']) ? $data['saved_card'] : null;
        $this->container['verification_code'] = isset($data['verification_code']) ? $data['verification_code'] : null;
        $this->container['token_obj'] = isset($data['token_obj']) ? $data['token_obj'] : null;
        $this->container['security_code_validated'] = isset($data['security_code_validated']) ? $data['security_code_validated'] : null;
        $this->container['ups_account_number'] = isset($data['ups_account_number']) ? $data['ups_account_number'] : null;
        $this->container['payment_token_flag'] = isset($data['payment_token_flag']) ? $data['payment_token_flag'] : null;
        $this->container['card_holder_name'] = isset($data['card_holder_name']) ? $data['card_holder_name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['saved_card'] === null) {
            $invalidProperties[] = "'saved_card' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets billing_address
     *
     * @return \UPS\DeliveryIntercept\DeliveryIntercept\AddressInformation
     */
    public function getBillingAddress()
    {
        return $this->container['billing_address'];
    }

    /**
     * Sets billing_address
     *
     * @param \UPS\DeliveryIntercept\DeliveryIntercept\AddressInformation $billing_address billing_address
     *
     * @return $this
     */
    public function setBillingAddress($billing_address)
    {
        $this->container['billing_address'] = $billing_address;

        return $this;
    }

    /**
     * Gets platform_type
     *
     * @return 
     */
    public function getPlatformType()
    {
        return $this->container['platform_type'];
    }

    /**
     * Sets platform_type
     *
     * @param  $platform_type Platform type associated with the source application.   | VALUE  | DESCRIPTION                  | | :--    | :--                          | | AU     | M.UPS.COM                    | | GG    | UPSXMLONLINETOOLS            | | 72     | WEB-INTERNETBASEDAPPLICATION | | XK     | UPSMOBILEFORANDROID          | | XL     | UPSMOBILEFORIOS              |  | XM     | UPSSOCIALFACEBOOKCLIENT=XM   |
     *
     * @return $this
     */
    public function setPlatformType($platform_type)
    {
        $this->container['platform_type'] = $platform_type;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return 
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param  $currency_code Default value is “USD”. The currency code associated with the charges.
     *
     * @return $this
     */
    public function setCurrencyCode($currency_code)
    {
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets iobb
     *
     * @return 
     */
    public function getIobb()
    {
        return $this->container['iobb'];
    }

    /**
     * Sets iobb
     *
     * @param  $iobb Used on request only for non-authorized payment. Used for fraud checking/scoring.  | S.NO. | DESCRIPTION                                 | | :--:  | :--                                         | | 1     | iobb value is labeled “EMPTY”               | | 2     | tmid is populated with the Threat Metrix ID |
     *
     * @return $this
     */
    public function setIobb($iobb)
    {
        $this->container['iobb'] = $iobb;

        return $this;
    }

    /**
     * Gets default_account
     *
     * @return 
     */
    public function getDefaultAccount()
    {
        return $this->container['default_account'];
    }

    /**
     * Sets default_account
     *
     * @param  $default_account Default value is FALSE. Indicator if this is the default payment in the user's profile.
     *
     * @return $this
     */
    public function setDefaultAccount($default_account)
    {
        $this->container['default_account'] = $default_account;

        return $this;
    }

    /**
     * Gets displayable_number
     *
     * @return 
     */
    public function getDisplayableNumber()
    {
        return $this->container['displayable_number'];
    }

    /**
     * Sets displayable_number
     *
     * @param  $displayable_number Displayable account number.
     *
     * @return $this
     */
    public function setDisplayableNumber($displayable_number)
    {
        $this->container['displayable_number'] = $displayable_number;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return 
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param  $amount The total transaction amount to authorize based on the charges.
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets account_name
     *
     * @return 
     */
    public function getAccountName()
    {
        return $this->container['account_name'];
    }

    /**
     * Sets account_name
     *
     * @param  $account_name The account name associated with this payment.
     *
     * @return $this
     */
    public function setAccountName($account_name)
    {
        $this->container['account_name'] = $account_name;

        return $this;
    }

    /**
     * Gets guid_code
     *
     * @return 
     */
    public function getGuidCode()
    {
        return $this->container['guid_code'];
    }

    /**
     * Sets guid_code
     *
     * @param  $guid_code The guid generated after the transaction payment authorization, acts as the authorization code.
     *
     * @return $this
     */
    public function setGuidCode($guid_code)
    {
        $this->container['guid_code'] = $guid_code;

        return $this;
    }

    /**
     * Gets tokenized_account_number
     *
     * @return 
     */
    public function getTokenizedAccountNumber()
    {
        return $this->container['tokenized_account_number'];
    }

    /**
     * Sets tokenized_account_number
     *
     * @param  $tokenized_account_number The encrypted card account number. Request required for non-authorized cards
     *
     * @return $this
     */
    public function setTokenizedAccountNumber($tokenized_account_number)
    {
        $this->container['tokenized_account_number'] = $tokenized_account_number;

        return $this;
    }

    /**
     * Gets card_type
     *
     * @return 
     */
    public function getCardType()
    {
        return $this->container['card_type'];
    }

    /**
     * Sets card_type
     *
     * @param  $card_type The card type is required for non-authorized cards and new cards.
     *
     * @return $this
     */
    public function setCardType($card_type)
    {
        $this->container['card_type'] = $card_type;

        return $this;
    }

    /**
     * Gets expire_year
     *
     * @return 
     */
    public function getExpireYear()
    {
        return $this->container['expire_year'];
    }

    /**
     * Sets expire_year
     *
     * @param  $expire_year The card expiration date year. Format- YYYY
     *
     * @return $this
     */
    public function setExpireYear($expire_year)
    {
        $this->container['expire_year'] = $expire_year;

        return $this;
    }

    /**
     * Gets expire_month
     *
     * @return 
     */
    public function getExpireMonth()
    {
        return $this->container['expire_month'];
    }

    /**
     * Sets expire_month
     *
     * @param  $expire_month The card expiration date month. Format- MM
     *
     * @return $this
     */
    public function setExpireMonth($expire_month)
    {
        $this->container['expire_month'] = $expire_month;

        return $this;
    }

    /**
     * Gets saved_card
     *
     * @return 
     */
    public function getSavedCard()
    {
        return $this->container['saved_card'];
    }

    /**
     * Sets saved_card
     *
     * @param  $saved_card Default value is FALSE. Indicates if this is a new card and should be saved to the user's profile.
     *
     * @return $this
     */
    public function setSavedCard($saved_card)
    {
        $this->container['saved_card'] = $saved_card;

        return $this;
    }

    /**
     * Gets verification_code
     *
     * @return 
     */
    public function getVerificationCode()
    {
        return $this->container['verification_code'];
    }

    /**
     * Sets verification_code
     *
     * @param  $verification_code The card specific certification / verification code.
     *
     * @return $this
     */
    public function setVerificationCode($verification_code)
    {
        $this->container['verification_code'] = $verification_code;

        return $this;
    }

    /**
     * Gets token_obj
     *
     * @return \UPS\DeliveryIntercept\DeliveryIntercept\PaymentContainerCreditCardInfoTokenObj
     */
    public function getTokenObj()
    {
        return $this->container['token_obj'];
    }

    /**
     * Sets token_obj
     *
     * @param \UPS\DeliveryIntercept\DeliveryIntercept\PaymentContainerCreditCardInfoTokenObj $token_obj token_obj
     *
     * @return $this
     */
    public function setTokenObj($token_obj)
    {
        $this->container['token_obj'] = $token_obj;

        return $this;
    }

    /**
     * Gets security_code_validated
     *
     * @return 
     */
    public function getSecurityCodeValidated()
    {
        return $this->container['security_code_validated'];
    }

    /**
     * Sets security_code_validated
     *
     * @param  $security_code_validated Default value is TRUE. Indicates if the cvv verification code validation should be performed.
     *
     * @return $this
     */
    public function setSecurityCodeValidated($security_code_validated)
    {
        $this->container['security_code_validated'] = $security_code_validated;

        return $this;
    }

    /**
     * Gets ups_account_number
     *
     * @return 
     */
    public function getUpsAccountNumber()
    {
        return $this->container['ups_account_number'];
    }

    /**
     * Sets ups_account_number
     *
     * @param  $ups_account_number Account number associated with this card.
     *
     * @return $this
     */
    public function setUpsAccountNumber($ups_account_number)
    {
        $this->container['ups_account_number'] = $ups_account_number;

        return $this;
    }

    /**
     * Gets payment_token_flag
     *
     * @return 
     */
    public function getPaymentTokenFlag()
    {
        return $this->container['payment_token_flag'];
    }

    /**
     * Sets payment_token_flag
     *
     * @param  $payment_token_flag Default value is FALSE. Payment token flag indicator.
     *
     * @return $this
     */
    public function setPaymentTokenFlag($payment_token_flag)
    {
        $this->container['payment_token_flag'] = $payment_token_flag;

        return $this;
    }

    /**
     * Gets card_holder_name
     *
     * @return 
     */
    public function getCardHolderName()
    {
        return $this->container['card_holder_name'];
    }

    /**
     * Sets card_holder_name
     *
     * @param  $card_holder_name Card account name used when saving a new card to the user's profile.
     *
     * @return $this
     */
    public function setCardHolderName($card_holder_name)
    {
        $this->container['card_holder_name'] = $card_holder_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
