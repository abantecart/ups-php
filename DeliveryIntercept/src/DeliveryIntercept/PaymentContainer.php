<?php
/**
 * PaymentContainer
 *
 * PHP version 5
 *
 * @category Class
 * @package  UPS\DeliveryIntercept
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Delivery Intercept® API
 *
 * With the UPS Delivery Intercept® API, a shipper can manage the delivery details of their shipment, prior to delivery.  # Business Values  **Key Business Values:** - elimination of manually processing customer requests - acceptance of requests later in the delivery process  <a href=\"https://developer.ups.com/api/reference/deliveryintercept/product-info\" target=\"_blank\" rel=\"noopener\">Product Info</a>  <a href=\"https://god.gw.postman.com/run-collection/29542085-f2409ef1-39c9-4f4a-a509-a3f860068ff4?action=collection%2Ffork&source=rip_markdown&collection-url=entityId%3D29542085-f2409ef1-39c9-4f4a-a509-a3f860068ff4%26entityType%3Dcollection%26workspaceId%3D7e7595f0-4829-4f9a-aee1-75c126b9d417\" target=\"_blank\" rel=\"noopener noreferrer\">   <img src=\"https://run.pstmn.io/button.svg\" alt=\"Run In Postman\" style=\"width: 128px; height: 32px;\"> </a>  # CIE Behavior  The Delivery Intercept API will return a stubbed success response if the correct data is used for a given endpoint. The static data that is valid for each of the endpoints is in the table below:  | Endpoint | transId | trackingNumber                                                                                                                                                                                              | |------------|-------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------| | /charges     | SIICharges         | 1Z4096YY0316914058 | /willcall     | SIIWillcall        | 1Z4096YY0316914058 | /return     | SIIReturn         | 1Z4096YY0316914058 | /reschedule     | SIIReschedule         | 1Z4096YY0316914058 | /redirect/address     | SIIRedirect         | 1Z4096YY0316914058 | /cancel     | SIICancel         | 1Z4096YY0316914058
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.71
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace UPS\DeliveryIntercept\DeliveryIntercept;

use \ArrayAccess;
use \UPS\DeliveryIntercept\ObjectSerializer;

/**
 * PaymentContainer Class Doc Comment
 *
 * @category Class
 * @package  UPS\DeliveryIntercept
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PaymentContainer implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PaymentContainer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'payment_type' => '',
        'payment_authorized' => '',
        'credit_card_info' => '\UPS\DeliveryIntercept\DeliveryIntercept\PaymentContainerCreditCardInfo',
        'account_info' => '\UPS\DeliveryIntercept\DeliveryIntercept\PaymentContainerAccountInfo',
        'paypal_account' => '\UPS\DeliveryIntercept\DeliveryIntercept\PaymentContainerPaypalAccount'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'payment_type' => null,
        'payment_authorized' => null,
        'credit_card_info' => null,
        'account_info' => null,
        'paypal_account' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'payment_type' => 'paymentType',
        'payment_authorized' => 'paymentAuthorized',
        'credit_card_info' => 'creditCardInfo',
        'account_info' => 'accountInfo',
        'paypal_account' => 'paypalAccount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'payment_type' => 'setPaymentType',
        'payment_authorized' => 'setPaymentAuthorized',
        'credit_card_info' => 'setCreditCardInfo',
        'account_info' => 'setAccountInfo',
        'paypal_account' => 'setPaypalAccount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'payment_type' => 'getPaymentType',
        'payment_authorized' => 'getPaymentAuthorized',
        'credit_card_info' => 'getCreditCardInfo',
        'account_info' => 'getAccountInfo',
        'paypal_account' => 'getPaypalAccount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['payment_type'] = isset($data['payment_type']) ? $data['payment_type'] : null;
        $this->container['payment_authorized'] = isset($data['payment_authorized']) ? $data['payment_authorized'] : null;
        $this->container['credit_card_info'] = isset($data['credit_card_info']) ? $data['credit_card_info'] : null;
        $this->container['account_info'] = isset($data['account_info']) ? $data['account_info'] : null;
        $this->container['paypal_account'] = isset($data['paypal_account']) ? $data['paypal_account'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets payment_type
     *
     * @return 
     */
    public function getPaymentType()
    {
        return $this->container['payment_type'];
    }

    /**
     * Sets payment_type
     *
     * @param  $payment_type Conditional on the charges. Required if the charges are greater than zero.  | CODE  | DESCRIPTION       | | :--:  | :--               | | C     | Credit Card       | | A     | Consignee Account | | P     | PayPal            | | G     | GooglePay         | | I     | ApplePay          |
     *
     * @return $this
     */
    public function setPaymentType($payment_type)
    {
        $this->container['payment_type'] = $payment_type;

        return $this;
    }

    /**
     * Gets payment_authorized
     *
     * @return 
     */
    public function getPaymentAuthorized()
    {
        return $this->container['payment_authorized'];
    }

    /**
     * Sets payment_authorized
     *
     * @param  $payment_authorized Indicates if the credit card / PayPal payment transaction is pre-authorized. TRUE - the payment transaction is pre-authorized.
     *
     * @return $this
     */
    public function setPaymentAuthorized($payment_authorized)
    {
        $this->container['payment_authorized'] = $payment_authorized;

        return $this;
    }

    /**
     * Gets credit_card_info
     *
     * @return \UPS\DeliveryIntercept\DeliveryIntercept\PaymentContainerCreditCardInfo
     */
    public function getCreditCardInfo()
    {
        return $this->container['credit_card_info'];
    }

    /**
     * Sets credit_card_info
     *
     * @param \UPS\DeliveryIntercept\DeliveryIntercept\PaymentContainerCreditCardInfo $credit_card_info credit_card_info
     *
     * @return $this
     */
    public function setCreditCardInfo($credit_card_info)
    {
        $this->container['credit_card_info'] = $credit_card_info;

        return $this;
    }

    /**
     * Gets account_info
     *
     * @return \UPS\DeliveryIntercept\DeliveryIntercept\PaymentContainerAccountInfo
     */
    public function getAccountInfo()
    {
        return $this->container['account_info'];
    }

    /**
     * Sets account_info
     *
     * @param \UPS\DeliveryIntercept\DeliveryIntercept\PaymentContainerAccountInfo $account_info account_info
     *
     * @return $this
     */
    public function setAccountInfo($account_info)
    {
        $this->container['account_info'] = $account_info;

        return $this;
    }

    /**
     * Gets paypal_account
     *
     * @return \UPS\DeliveryIntercept\DeliveryIntercept\PaymentContainerPaypalAccount
     */
    public function getPaypalAccount()
    {
        return $this->container['paypal_account'];
    }

    /**
     * Sets paypal_account
     *
     * @param \UPS\DeliveryIntercept\DeliveryIntercept\PaymentContainerPaypalAccount $paypal_account paypal_account
     *
     * @return $this
     */
    public function setPaypalAccount($paypal_account)
    {
        $this->container['paypal_account'] = $paypal_account;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
