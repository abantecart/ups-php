<?php
/**
 * OneOfLabelRecoveryResponseLabelResults
 *
 * PHP version 5
 *
 * @category Class
 * @package  UPS\Shipping
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ship
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 *
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.50
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace UPS\Shipping\Shipping;

use ArrayAccess;
use UPS\Shipping\ObjectSerializer;

/**
 * OneOfLabelRecoveryResponseLabelResults Class Doc Comment
 *
 * @category Class
 * @package  UPS\Shipping
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OneOfLabelRecoveryResponseLabelResults implements ModelInterface, ArrayAccess
{
	const DISCRIMINATOR = null;

	/**
	 * The original name of the model.
	 *
	 * @var string
	 */
	protected static $swaggerModelName = 'OneOfLabelRecoveryResponseLabelResults';

	/**
	 * Array of property to type mappings. Used for (de)serialization
	 *
	 * @var string[]
	 */
	protected static $swaggerTypes = [
		'tracking_number' => 'string',
		'label_image'     => '\UPS\Shipping\Shipping\LabelResultsLabelImage',
	];

	/**
	 * Array of property to format mappings. Used for (de)serialization
	 *
	 * @var string[]
	 */
	protected static $swaggerFormats = [
		'tracking_number' => null,
		'label_image'     => null,
	];
	/**
	 * Array of attributes where the key is the local name,
	 * and the value is the original name
	 *
	 * @var string[]
	 */
	protected static $attributeMap = [
		'tracking_number' => 'TrackingNumber',
		'label_image'     => 'LabelImage',
	];
	/**
	 * Array of attributes to setter functions (for deserialization of responses)
	 *
	 * @var string[]
	 */
	protected static $setters = [
		'tracking_number' => 'setTrackingNumber',
		'label_image'     => 'setLabelImage',
	];
	/**
	 * Array of attributes to getter functions (for serialization of requests)
	 *
	 * @var string[]
	 */
	protected static $getters = [
		'tracking_number' => 'getTrackingNumber',
		'label_image'     => 'getLabelImage',
	];
	/**
	 * Associative array for storing property values
	 *
	 * @var mixed[]
	 */
	protected $container = [];

	/**
	 * Constructor
	 *
	 * @param mixed[] $data Associated array of property values
	 *                      initializing the model
	 */
	public function __construct ( array $data = null )
	{
		$this->container[ 'tracking_number' ] = isset( $data[ 'tracking_number' ] ) ? $data[ 'tracking_number' ] : null;
		$this->container[ 'label_image' ]     = isset( $data[ 'label_image' ] ) ? $data[ 'label_image' ] : null;
	}

	/**
	 * Array of property to type mappings. Used for (de)serialization
	 *
	 * @return array
	 */
	public static function swaggerTypes ()
	{
		return self::$swaggerTypes;
	}

	/**
	 * Array of property to format mappings. Used for (de)serialization
	 *
	 * @return array
	 */
	public static function swaggerFormats ()
	{
		return self::$swaggerFormats;
	}

	/**
	 * Array of attributes where the key is the local name,
	 * and the value is the original name
	 *
	 * @return array
	 */
	public static function attributeMap ()
	{
		return self::$attributeMap;
	}

	/**
	 * Array of attributes to setter functions (for deserialization of responses)
	 *
	 * @return array
	 */
	public static function setters ()
	{
		return self::$setters;
	}

	/**
	 * Array of attributes to getter functions (for serialization of requests)
	 *
	 * @return array
	 */
	public static function getters ()
	{
		return self::$getters;
	}

	/**
	 * The original name of the model.
	 *
	 * @return string
	 */
	public function getModelName ()
	{
		return self::$swaggerModelName;
	}

	public function getTrackingNumber ()
	{
		return $this->container[ 'tracking_number' ];

	}

	public function setTrackingNumber ( $tracking_number )
	{
		$this->container[ 'tracking_number' ] = $tracking_number;

		return $this;
	}

	public function getLabelImage ()
	{
		return $this->container[ 'label_image' ];

	}

	public function setLabelImage ( $label_image )
	{
		$this->container[ 'label_image' ] = $label_image;

		return $this;
	}

	/**
	 * Returns true if offset exists. False otherwise.
	 *
	 * @param integer $offset Offset
	 *
	 * @return boolean
	 */
	#[\ReturnTypeWillChange]
	public function offsetExists ( $offset )
	{
		return isset( $this->container[ $offset ] );
	}

	/**
	 * Gets offset.
	 *
	 * @param integer $offset Offset
	 *
	 * @return mixed
	 */
	#[\ReturnTypeWillChange]
	public function offsetGet ( $offset )
	{
		return isset( $this->container[ $offset ] ) ? $this->container[ $offset ] : null;
	}	/**
	 * Show all the invalid properties with reasons.
	 *
	 * @return array invalid properties with reasons
	 */
	public function listInvalidProperties ()
	{
		$invalidProperties = [];
		if ( $this->container[ 'tracking_number' ] === null ) {
			$invalidProperties[] = "'tracking_number' can't be null";
		}

		if ( $this->container[ 'label_image' ] === null ) {
			$invalidProperties[] = "'label_image' can't be null";
		}
		return $invalidProperties;
	}

	/**
	 * Sets value based on offset.
	 *
	 * @param integer $offset Offset
	 * @param mixed   $value  Value to be set
	 *
	 * @return void
	 */
	#[\ReturnTypeWillChange]
	public function offsetSet ( $offset, $value )
	{
		if ( is_null( $offset ) ) {
			$this->container[] = $value;
		}
		else {
			$this->container[ $offset ] = $value;
		}
	}

	/**
	 * Unsets offset.
	 *
	 * @param integer $offset Offset
	 *
	 * @return void
	 */
	#[\ReturnTypeWillChange]
	public function offsetUnset ( $offset )
	{
		unset( $this->container[ $offset ] );
	}	/**
	 * Validate all the properties in the model
	 * return true if all passed
	 *
	 * @return bool True if all properties are valid
	 */
	public function valid ()
	{
		return count( $this->listInvalidProperties() ) === 0;
	}

	/**
	 * Gets the string presentation of the object
	 *
	 * @return string
	 */
	public function __toString ()
	{
		if ( defined( 'JSON_PRETTY_PRINT' ) ) { // use JSON pretty print
			return json_encode(
				ObjectSerializer::sanitizeForSerialization( $this ),
				JSON_PRETTY_PRINT
			);
		}

		return json_encode( ObjectSerializer::sanitizeForSerialization( $this ) );
	}






}
