<?php
/**
 * DeliveryPhoto
 *
 * PHP version 5
 *
 * @category Class
 * @package  UPS\Tracking
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * UPS TrackService API
 *
 * The Track API helps retrieves current status of shipments such as Small Package 1Z, Infonotice, Mail Innovations, FGV, or UPS Freight shipments using the package number or the reference number. The tracking response data typically includes package movements/activities, destination UPS access point information, expected delivery dates/times, etc. Required parameters are the inquiryNumber, transaction ID, and transaction source.<br />The response returns an array of shipment objects containing detailed tracking information and status for the package(s) associated with the inquiryNumber, including current status, activity history, delivery details, package details, and more. For more information on the Track API, please visit the <a href=\"https://developer.ups.com/api/reference/tracking/product-info\" target=\"_blank\" rel=\"noopener noreferrer\">Product Overview</a> page.  **Note:** Data is rolled off after the 120 day retention period and may not be returned in the response after the retention period.  Key Business Values: - **Near real-time tracking information**: Get up-to-date information on the status and location of your shipments, so you can keep your customers informed. - **Proof of Delivery**: Automated proof of delivery updates with signature verification to help prevent fraud and theft. - **Improved cash flow**: Reduce the time it takes to collect payments by tracking shipments and invoices electronically.  # Reference - <a href=\"https://developer.ups.com/api/reference/tracking/business-rules\" target=\"_blank\" rel=\"noopener\">Business Rules</a> - <a href=\"https://developer.ups.com/api/reference/tracking/appendix\" target=\"_blank\" rel=\"noopener\">Appendix</a> - <a href=\"https://developer.ups.com/api/reference/trackingapi/errors\" target=\"_blank\" rel=\"noopener noreferrer\">Errors</a>  <br/><p>Try out UPS APIs with example requests using Postman. Explore API documentation and sample applications through GitHub.</p>  <a href=\"https://god.gw.postman.com/run-collection/29542085-003f5ace-291f-4d93-b2a2-6be86eb9961d?action=collection%2Ffork&source=rip_markdown&collection-url=entityId%3D29542085-003f5ace-291f-4d93-b2a2-6be86eb9961d%26entityType%3Dcollection%26workspaceId%3D7e7595f0-4829-4f9a-aee1-75c126b9d417\" target=\"_blank\" rel=\"noopener noreferrer\">   <img src=\"https://run.pstmn.io/button.svg\" alt=\"Run In Postman\" style=\"width: 128px; height: 32px;\"></a> <a href=\"https://github.com/UPS-API\" target=\"_blank\" rel=\"noopener noreferrer\">   <img src=\"https://www.ups.com/assets/resources/webcontent/images/gitHubButton.svg\" alt=\"Open in GitHub \" style=\"width: 128px; height: 32px;\"> </a>
 *
 * 
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.71
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace UPS\Tracking\Tracking;

use \ArrayAccess;
use \UPS\Tracking\ObjectSerializer;

/**
 * DeliveryPhoto Class Doc Comment
 *
 * @category Class
 * @description Container with all information related to the delivery photo of the package.
 * @package  UPS\Tracking
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DeliveryPhoto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DeliveryPhoto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'is_non_postal_code_country' => 'bool',
        'photo' => 'string',
        'photo_capture_ind' => 'string',
        'photo_disposition_code' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'is_non_postal_code_country' => null,
        'photo' => null,
        'photo_capture_ind' => null,
        'photo_disposition_code' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'is_non_postal_code_country' => 'isNonPostalCodeCountry',
        'photo' => 'photo',
        'photo_capture_ind' => 'photoCaptureInd',
        'photo_disposition_code' => 'photoDispositionCode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'is_non_postal_code_country' => 'setIsNonPostalCodeCountry',
        'photo' => 'setPhoto',
        'photo_capture_ind' => 'setPhotoCaptureInd',
        'photo_disposition_code' => 'setPhotoDispositionCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'is_non_postal_code_country' => 'getIsNonPostalCodeCountry',
        'photo' => 'getPhoto',
        'photo_capture_ind' => 'getPhotoCaptureInd',
        'photo_disposition_code' => 'getPhotoDispositionCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['is_non_postal_code_country'] = isset($data['is_non_postal_code_country']) ? $data['is_non_postal_code_country'] : null;
        $this->container['photo'] = isset($data['photo']) ? $data['photo'] : null;
        $this->container['photo_capture_ind'] = isset($data['photo_capture_ind']) ? $data['photo_capture_ind'] : null;
        $this->container['photo_disposition_code'] = isset($data['photo_disposition_code']) ? $data['photo_disposition_code'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets is_non_postal_code_country
     *
     * @return bool
     */
    public function getIsNonPostalCodeCountry()
    {
        return $this->container['is_non_postal_code_country'];
    }

    /**
     * Sets is_non_postal_code_country
     *
     * @param bool $is_non_postal_code_country The indication if the country does not use postal code. Valid values: 'true' this country does not use postal code. 'false' this country uses postal code
     *
     * @return $this
     */
    public function setIsNonPostalCodeCountry($is_non_postal_code_country)
    {
        $this->container['is_non_postal_code_country'] = $is_non_postal_code_country;

        return $this;
    }

    /**
     * Gets photo
     *
     * @return string
     */
    public function getPhoto()
    {
        return $this->container['photo'];
    }

    /**
     * Sets photo
     *
     * @param string $photo photo
     *
     * @return $this
     */
    public function setPhoto($photo)
    {
        $this->container['photo'] = $photo;

        return $this;
    }

    /**
     * Gets photo_capture_ind
     *
     * @return string
     */
    public function getPhotoCaptureInd()
    {
        return $this->container['photo_capture_ind'];
    }

    /**
     * Sets photo_capture_ind
     *
     * @param string $photo_capture_ind The photo capture indicator. Valid values: 'Y' the photo is an photo capture. 'N' the photo is not a capture
     *
     * @return $this
     */
    public function setPhotoCaptureInd($photo_capture_ind)
    {
        $this->container['photo_capture_ind'] = $photo_capture_ind;

        return $this;
    }

    /**
     * Gets photo_disposition_code
     *
     * @return string
     */
    public function getPhotoDispositionCode()
    {
        return $this->container['photo_disposition_code'];
    }

    /**
     * Sets photo_disposition_code
     *
     * @param string $photo_disposition_code The photo disposition code. Valid values: 'V' the photo is viewable. 'N' the photo is not viewable. 'U' the photo is not stored
     *
     * @return $this
     */
    public function setPhotoDispositionCode($photo_disposition_code)
    {
        $this->container['photo_disposition_code'] = $photo_disposition_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
