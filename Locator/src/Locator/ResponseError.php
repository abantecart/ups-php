<?php
/**
 * ResponseError
 *
 * PHP version 5
 *
 * @category Class
 * @package  UPS\Locator
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Locator
 *
 * The Locator API allows you to find UPS locations - such as drop-off points, retail locations, and UPS access points (third-party retail locations that offer UPS package drop-off, or delivery services). The API provides capabilities to search by location, services offered, program types, and related criteria. You can also retrieve hours of operation, location details, and additional UPS services offered at specific locations. # Reference - <a href=\"https://developer.ups.com/api/reference/locator/business-rules\" target=\"_blank\" rel=\"noopener\">Business Rules</a> - <a href=\"https://developer.ups.com/api/reference/locator/appendix\" target=\"_blank\" rel=\"noopener\">Appendix</a> - <a href=\"https://developer.ups.com/api/reference/locator/errors\" target=\"_blank\" rel=\"noopener\">Errors</a>  </br><p>Try out UPS APIs with example requests using Postman. Explore API documentation and sample applications through GitHub.</p>  <a href=\"https://god.gw.postman.com/run-collection/29542085-8637d9f1-5e40-4a1e-aa95-82376e268638?action=collection%2Ffork&source=rip_markdown&collection-url=entityId%3D29542085-8637d9f1-5e40-4a1e-aa95-82376e268638%26entityType%3Dcollection%26workspaceId%3D7e7595f0-4829-4f9a-aee1-75c126b9d417\" target=\"_blank\" rel=\"noopener noreferrer\">   <img src=\"https://run.pstmn.io/button.svg\" alt=\"Run In Postman\" style=\"width: 128px; height: 32px;\"></a> <a href=\"https://github.com/UPS-API\" target=\"_blank\" rel=\"noopener noreferrer\">   <img src=\"https://www.ups.com/assets/resources/webcontent/images/gitHubButton.svg\" alt=\"Open in GitHub \" style=\"width: 128px; height: 32px;\"> </a>
 *
 * 
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.71
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace UPS\Locator\Locator;

use \ArrayAccess;
use \UPS\Locator\ObjectSerializer;

/**
 * ResponseError Class Doc Comment
 *
 * @category Class
 * @description If an error is encountered during the interchange, the Response contains an error. If the error is present, then the ErrorSeverity and ErrorCode are required.
 * @package  UPS\Locator
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ResponseError implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Response_Error';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'error_severity' => 'string',
        'error_code' => 'string',
        'error_description' => 'string',
        'minimum_retry_seconds' => 'string',
        'error_location' => '\UPS\Locator\Locator\ErrorErrorLocation[]',
        'error_digest' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'error_severity' => null,
        'error_code' => null,
        'error_description' => null,
        'minimum_retry_seconds' => null,
        'error_location' => null,
        'error_digest' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'error_severity' => 'ErrorSeverity',
        'error_code' => 'ErrorCode',
        'error_description' => 'ErrorDescription',
        'minimum_retry_seconds' => 'MinimumRetrySeconds',
        'error_location' => 'ErrorLocation',
        'error_digest' => 'ErrorDigest'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'error_severity' => 'setErrorSeverity',
        'error_code' => 'setErrorCode',
        'error_description' => 'setErrorDescription',
        'minimum_retry_seconds' => 'setMinimumRetrySeconds',
        'error_location' => 'setErrorLocation',
        'error_digest' => 'setErrorDigest'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'error_severity' => 'getErrorSeverity',
        'error_code' => 'getErrorCode',
        'error_description' => 'getErrorDescription',
        'minimum_retry_seconds' => 'getMinimumRetrySeconds',
        'error_location' => 'getErrorLocation',
        'error_digest' => 'getErrorDigest'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['error_severity'] = isset($data['error_severity']) ? $data['error_severity'] : null;
        $this->container['error_code'] = isset($data['error_code']) ? $data['error_code'] : null;
        $this->container['error_description'] = isset($data['error_description']) ? $data['error_description'] : null;
        $this->container['minimum_retry_seconds'] = isset($data['minimum_retry_seconds']) ? $data['minimum_retry_seconds'] : null;
        $this->container['error_location'] = isset($data['error_location']) ? $data['error_location'] : null;
        $this->container['error_digest'] = isset($data['error_digest']) ? $data['error_digest'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['error_severity'] === null) {
            $invalidProperties[] = "'error_severity' can't be null";
        }
        if ($this->container['error_code'] === null) {
            $invalidProperties[] = "'error_code' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets error_severity
     *
     * @return string
     */
    public function getErrorSeverity()
    {
        return $this->container['error_severity'];
    }

    /**
     * Sets error_severity
     *
     * @param string $error_severity Describes the severity of the error.  For additional information, refer to Locator Error Codes in the Appendix.
     *
     * @return $this
     */
    public function setErrorSeverity($error_severity)
    {
        $this->container['error_severity'] = $error_severity;

        return $this;
    }

    /**
     * Gets error_code
     *
     * @return string
     */
    public function getErrorCode()
    {
        return $this->container['error_code'];
    }

    /**
     * Sets error_code
     *
     * @param string $error_code A numeric value that describes the error. Each tool defines a range of error codes.  For additional information, refer to Locator Error Codes in the Appendix.
     *
     * @return $this
     */
    public function setErrorCode($error_code)
    {
        $this->container['error_code'] = $error_code;

        return $this;
    }

    /**
     * Gets error_description
     *
     * @return string
     */
    public function getErrorDescription()
    {
        return $this->container['error_description'];
    }

    /**
     * Sets error_description
     *
     * @param string $error_description Describes the error code.
     *
     * @return $this
     */
    public function setErrorDescription($error_description)
    {
        $this->container['error_description'] = $error_description;

        return $this;
    }

    /**
     * Gets minimum_retry_seconds
     *
     * @return string
     */
    public function getMinimumRetrySeconds()
    {
        return $this->container['minimum_retry_seconds'];
    }

    /**
     * Sets minimum_retry_seconds
     *
     * @param string $minimum_retry_seconds Number of seconds to wait until retry.   This field is populated on special conditions of the Transient Error only, as defined by the service.  A number between 1 and 86400 (24 hours)
     *
     * @return $this
     */
    public function setMinimumRetrySeconds($minimum_retry_seconds)
    {
        $this->container['minimum_retry_seconds'] = $minimum_retry_seconds;

        return $this;
    }

    /**
     * Gets error_location
     *
     * @return \UPS\Locator\Locator\ErrorErrorLocation[]
     */
    public function getErrorLocation()
    {
        return $this->container['error_location'];
    }

    /**
     * Sets error_location
     *
     * @param \UPS\Locator\Locator\ErrorErrorLocation[] $error_location Identifies the element in error.  **NOTE:** For versions >= v2, this element will always be returned as an array. For requests using version = v1, this element will be returned as an array if there is more than one object and a single object if there is only 1.
     *
     * @return $this
     */
    public function setErrorLocation($error_location)
    {
        $this->container['error_location'] = $error_location;

        return $this;
    }

    /**
     * Gets error_digest
     *
     * @return string[]
     */
    public function getErrorDigest()
    {
        return $this->container['error_digest'];
    }

    /**
     * Sets error_digest
     *
     * @param string[] $error_digest The contents of the element in error.  **NOTE:** For versions >= v2, this element will always be returned as an array. For requests using version = v1, this element will be returned as an array if there is more than one object and a single object if there is only 1.
     *
     * @return $this
     */
    public function setErrorDigest($error_digest)
    {
        $this->container['error_digest'] = $error_digest;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
