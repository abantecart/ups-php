<?php
/**
 * WorldEaseShipmentManagementShipmentApi
 * PHP version 5
 *
 * @category Class
 * @package  UPS\WorldEaseShipmentManagement
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * WorldEase Shipment Management API v1
 *
 * ## Purpose The WorldEase Shipment Management API facilitates the consolidation of packages into a single shipment to reduce the brokerage fees and streamline international shipping processes. It offers users the ability to manage the shipment lifecycle including aggregating individual packages, closing out shipments once consolidation is completed and managing master and child shipments with options to delete as necessary.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.71
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace UPS\WorldEaseShipmentManagement\Request;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use UPS\WorldEaseShipmentManagement\ApiException;
use UPS\WorldEaseShipmentManagement\Configuration;
use UPS\WorldEaseShipmentManagement\HeaderSelector;
use UPS\WorldEaseShipmentManagement\ObjectSerializer;

/**
 * WorldEaseShipmentManagementShipmentApi Class Doc Comment
 *
 * @category Class
 * @package  UPS\WorldEaseShipmentManagement
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WorldEaseShipmentManagementShipmentApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deleteChildShipment
     *
     * Delete the child shipment
     *
     * @param   $shipment_gccn The unique identifier of the shipment to identify the master shipment. It is also known as GCCN. (required)
     * @param   $tracking_number The identifier of the shipment to identify the child shipment. It is also known as 1Z Tracking Number. (required)
     * @param  \UPS\WorldEaseShipmentManagement\WorldEaseShipmentManagement\CustomTransactionId $trans_id trans_id (required)
     * @param  \UPS\WorldEaseShipmentManagement\WorldEaseShipmentManagement\CustomTransactionSrc $transaction_src transaction_src (required)
     * @param   $version Indicates WorldEase Shipment Management API to display the new release features (required)
     *
     * @throws \UPS\WorldEaseShipmentManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \UPS\WorldEaseShipmentManagement\WorldEaseShipmentManagement\DeleteResponse
     */
    public function deleteChildShipment($shipment_gccn, $tracking_number, $trans_id, $transaction_src, $version)
    {
        list($response) = $this->deleteChildShipmentWithHttpInfo($shipment_gccn, $tracking_number, $trans_id, $transaction_src, $version);
        return $response;
    }

    /**
     * Operation deleteChildShipmentWithHttpInfo
     *
     * Delete the child shipment
     *
     * @param   $shipment_gccn The unique identifier of the shipment to identify the master shipment. It is also known as GCCN. (required)
     * @param   $tracking_number The identifier of the shipment to identify the child shipment. It is also known as 1Z Tracking Number. (required)
     * @param  \UPS\WorldEaseShipmentManagement\WorldEaseShipmentManagement\CustomTransactionId $trans_id (required)
     * @param  \UPS\WorldEaseShipmentManagement\WorldEaseShipmentManagement\CustomTransactionSrc $transaction_src (required)
     * @param   $version Indicates WorldEase Shipment Management API to display the new release features (required)
     *
     * @throws \UPS\WorldEaseShipmentManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \UPS\WorldEaseShipmentManagement\WorldEaseShipmentManagement\DeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteChildShipmentWithHttpInfo($shipment_gccn, $tracking_number, $trans_id, $transaction_src, $version)
    {
        $returnType = '\UPS\WorldEaseShipmentManagement\WorldEaseShipmentManagement\DeleteResponse';
        $request = $this->deleteChildShipmentRequest($shipment_gccn, $tracking_number, $trans_id, $transaction_src, $version);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\UPS\WorldEaseShipmentManagement\WorldEaseShipmentManagement\DeleteResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\UPS\WorldEaseShipmentManagement\WorldEaseShipmentManagement\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\UPS\WorldEaseShipmentManagement\WorldEaseShipmentManagement\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\UPS\WorldEaseShipmentManagement\WorldEaseShipmentManagement\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteChildShipmentAsync
     *
     * Delete the child shipment
     *
     * @param   $shipment_gccn The unique identifier of the shipment to identify the master shipment. It is also known as GCCN. (required)
     * @param   $tracking_number The identifier of the shipment to identify the child shipment. It is also known as 1Z Tracking Number. (required)
     * @param  \UPS\WorldEaseShipmentManagement\WorldEaseShipmentManagement\CustomTransactionId $trans_id (required)
     * @param  \UPS\WorldEaseShipmentManagement\WorldEaseShipmentManagement\CustomTransactionSrc $transaction_src (required)
     * @param   $version Indicates WorldEase Shipment Management API to display the new release features (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteChildShipmentAsync($shipment_gccn, $tracking_number, $trans_id, $transaction_src, $version)
    {
        return $this->deleteChildShipmentAsyncWithHttpInfo($shipment_gccn, $tracking_number, $trans_id, $transaction_src, $version)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteChildShipmentAsyncWithHttpInfo
     *
     * Delete the child shipment
     *
     * @param   $shipment_gccn The unique identifier of the shipment to identify the master shipment. It is also known as GCCN. (required)
     * @param   $tracking_number The identifier of the shipment to identify the child shipment. It is also known as 1Z Tracking Number. (required)
     * @param  \UPS\WorldEaseShipmentManagement\WorldEaseShipmentManagement\CustomTransactionId $trans_id (required)
     * @param  \UPS\WorldEaseShipmentManagement\WorldEaseShipmentManagement\CustomTransactionSrc $transaction_src (required)
     * @param   $version Indicates WorldEase Shipment Management API to display the new release features (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteChildShipmentAsyncWithHttpInfo($shipment_gccn, $tracking_number, $trans_id, $transaction_src, $version)
    {
        $returnType = '\UPS\WorldEaseShipmentManagement\WorldEaseShipmentManagement\DeleteResponse';
        $request = $this->deleteChildShipmentRequest($shipment_gccn, $tracking_number, $trans_id, $transaction_src, $version);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteChildShipment'
     *
     * @param   $shipment_gccn The unique identifier of the shipment to identify the master shipment. It is also known as GCCN. (required)
     * @param   $tracking_number The identifier of the shipment to identify the child shipment. It is also known as 1Z Tracking Number. (required)
     * @param  \UPS\WorldEaseShipmentManagement\WorldEaseShipmentManagement\CustomTransactionId $trans_id (required)
     * @param  \UPS\WorldEaseShipmentManagement\WorldEaseShipmentManagement\CustomTransactionSrc $transaction_src (required)
     * @param   $version Indicates WorldEase Shipment Management API to display the new release features (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteChildShipmentRequest($shipment_gccn, $tracking_number, $trans_id, $transaction_src, $version)
    {
        // verify the required parameter 'shipment_gccn' is set
        if ($shipment_gccn === null || (is_array($shipment_gccn) && count($shipment_gccn) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipment_gccn when calling deleteChildShipment'
            );
        }
        // verify the required parameter 'tracking_number' is set
        if ($tracking_number === null || (is_array($tracking_number) && count($tracking_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tracking_number when calling deleteChildShipment'
            );
        }
        // verify the required parameter 'trans_id' is set
        if ($trans_id === null || (is_array($trans_id) && count($trans_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $trans_id when calling deleteChildShipment'
            );
        }
        // verify the required parameter 'transaction_src' is set
        if ($transaction_src === null || (is_array($transaction_src) && count($transaction_src) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transaction_src when calling deleteChildShipment'
            );
        }
        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling deleteChildShipment'
            );
        }

        $resourcePath = '/child-shipment/{shipment-gccn}/{tracking-number}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($trans_id !== null) {
            $headerParams['transId'] = ObjectSerializer::toHeaderValue($trans_id);
        }
        // header params
        if ($transaction_src !== null) {
            $headerParams['transactionSrc'] = ObjectSerializer::toHeaderValue($transaction_src);
        }

        // path params
        if ($shipment_gccn !== null) {
            $resourcePath = str_replace(
                '{' . 'shipment-gccn' . '}',
                ObjectSerializer::toPathValue($shipment_gccn),
                $resourcePath
            );
        }
        // path params
        if ($tracking_number !== null) {
            $resourcePath = str_replace(
                '{' . 'trackingNumber' . '}',
                ObjectSerializer::toPathValue($tracking_number),
                $resourcePath
            );
        }
        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                '{' . 'version' . '}',
                ObjectSerializer::toPathValue($version),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteMasterShipment
     *
     * Deletes the master shipment
     *
     * @param  \UPS\WorldEaseShipmentManagement\WorldEaseShipmentManagement\CustomTransactionId $trans_id trans_id (required)
     * @param  \UPS\WorldEaseShipmentManagement\WorldEaseShipmentManagement\CustomTransactionSrc $transaction_src transaction_src (required)
     * @param   $shipment_gccn The unique identifier of the shipment to delete the master shipment. It is also known as GCCN. (required)
     * @param   $version Indicates WorldEase Shipment Management API to display the new release features (required)
     * @param  \UPS\WorldEaseShipmentManagement\WorldEaseShipmentManagement\PostRequest $body body (optional)
     *
     * @throws \UPS\WorldEaseShipmentManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \UPS\WorldEaseShipmentManagement\WorldEaseShipmentManagement\DeleteResponse
     */
    public function deleteMasterShipment($trans_id, $transaction_src, $shipment_gccn, $version, $body = null)
    {
        list($response) = $this->deleteMasterShipmentWithHttpInfo($trans_id, $transaction_src, $shipment_gccn, $version, $body);
        return $response;
    }

    /**
     * Operation deleteMasterShipmentWithHttpInfo
     *
     * Deletes the master shipment
     *
     * @param  \UPS\WorldEaseShipmentManagement\WorldEaseShipmentManagement\CustomTransactionId $trans_id (required)
     * @param  \UPS\WorldEaseShipmentManagement\WorldEaseShipmentManagement\CustomTransactionSrc $transaction_src (required)
     * @param   $shipment_gccn The unique identifier of the shipment to delete the master shipment. It is also known as GCCN. (required)
     * @param   $version Indicates WorldEase Shipment Management API to display the new release features (required)
     * @param  \UPS\WorldEaseShipmentManagement\WorldEaseShipmentManagement\PostRequest $body (optional)
     *
     * @throws \UPS\WorldEaseShipmentManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \UPS\WorldEaseShipmentManagement\WorldEaseShipmentManagement\DeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteMasterShipmentWithHttpInfo($trans_id, $transaction_src, $shipment_gccn, $version, $body = null)
    {
        $returnType = '\UPS\WorldEaseShipmentManagement\WorldEaseShipmentManagement\DeleteResponse';
        $request = $this->deleteMasterShipmentRequest($trans_id, $transaction_src, $shipment_gccn, $version, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\UPS\WorldEaseShipmentManagement\WorldEaseShipmentManagement\DeleteResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\UPS\WorldEaseShipmentManagement\WorldEaseShipmentManagement\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\UPS\WorldEaseShipmentManagement\WorldEaseShipmentManagement\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\UPS\WorldEaseShipmentManagement\WorldEaseShipmentManagement\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteMasterShipmentAsync
     *
     * Deletes the master shipment
     *
     * @param  \UPS\WorldEaseShipmentManagement\WorldEaseShipmentManagement\CustomTransactionId $trans_id (required)
     * @param  \UPS\WorldEaseShipmentManagement\WorldEaseShipmentManagement\CustomTransactionSrc $transaction_src (required)
     * @param   $shipment_gccn The unique identifier of the shipment to delete the master shipment. It is also known as GCCN. (required)
     * @param   $version Indicates WorldEase Shipment Management API to display the new release features (required)
     * @param  \UPS\WorldEaseShipmentManagement\WorldEaseShipmentManagement\PostRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteMasterShipmentAsync($trans_id, $transaction_src, $shipment_gccn, $version, $body = null)
    {
        return $this->deleteMasterShipmentAsyncWithHttpInfo($trans_id, $transaction_src, $shipment_gccn, $version, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteMasterShipmentAsyncWithHttpInfo
     *
     * Deletes the master shipment
     *
     * @param  \UPS\WorldEaseShipmentManagement\WorldEaseShipmentManagement\CustomTransactionId $trans_id (required)
     * @param  \UPS\WorldEaseShipmentManagement\WorldEaseShipmentManagement\CustomTransactionSrc $transaction_src (required)
     * @param   $shipment_gccn The unique identifier of the shipment to delete the master shipment. It is also known as GCCN. (required)
     * @param   $version Indicates WorldEase Shipment Management API to display the new release features (required)
     * @param  \UPS\WorldEaseShipmentManagement\WorldEaseShipmentManagement\PostRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteMasterShipmentAsyncWithHttpInfo($trans_id, $transaction_src, $shipment_gccn, $version, $body = null)
    {
        $returnType = '\UPS\WorldEaseShipmentManagement\WorldEaseShipmentManagement\DeleteResponse';
        $request = $this->deleteMasterShipmentRequest($trans_id, $transaction_src, $shipment_gccn, $version, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteMasterShipment'
     *
     * @param  \UPS\WorldEaseShipmentManagement\WorldEaseShipmentManagement\CustomTransactionId $trans_id (required)
     * @param  \UPS\WorldEaseShipmentManagement\WorldEaseShipmentManagement\CustomTransactionSrc $transaction_src (required)
     * @param   $shipment_gccn The unique identifier of the shipment to delete the master shipment. It is also known as GCCN. (required)
     * @param   $version Indicates WorldEase Shipment Management API to display the new release features (required)
     * @param  \UPS\WorldEaseShipmentManagement\WorldEaseShipmentManagement\PostRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteMasterShipmentRequest($trans_id, $transaction_src, $shipment_gccn, $version, $body = null)
    {
        // verify the required parameter 'trans_id' is set
        if ($trans_id === null || (is_array($trans_id) && count($trans_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $trans_id when calling deleteMasterShipment'
            );
        }
        // verify the required parameter 'transaction_src' is set
        if ($transaction_src === null || (is_array($transaction_src) && count($transaction_src) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transaction_src when calling deleteMasterShipment'
            );
        }
        // verify the required parameter 'shipment_gccn' is set
        if ($shipment_gccn === null || (is_array($shipment_gccn) && count($shipment_gccn) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipment_gccn when calling deleteMasterShipment'
            );
        }
        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling deleteMasterShipment'
            );
        }

        $resourcePath = '/master-shipment/{shipment-gccn}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($trans_id !== null) {
            $headerParams['transId'] = ObjectSerializer::toHeaderValue($trans_id);
        }
        // header params
        if ($transaction_src !== null) {
            $headerParams['transactionSrc'] = ObjectSerializer::toHeaderValue($transaction_src);
        }

        // path params
        if ($shipment_gccn !== null) {
            $resourcePath = str_replace(
                '{' . 'shipment-gccn' . '}',
                ObjectSerializer::toPathValue($shipment_gccn),
                $resourcePath
            );
        }
        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                '{' . 'version' . '}',
                ObjectSerializer::toPathValue($version),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation saveCloseOutShipment
     *
     * Close Out Shipment
     *
     * @param  \UPS\WorldEaseShipmentManagement\WorldEaseShipmentManagement\CustomTransactionId $trans_id trans_id (required)
     * @param  \UPS\WorldEaseShipmentManagement\WorldEaseShipmentManagement\CustomTransactionSrc $transaction_src transaction_src (required)
     * @param   $shipment_gccn The unique identifier of the shipment to close Out. It also known as GCCN. (required)
     * @param   $version Indicates WorldEase Shipment Management API to display the new release features (required)
     * @param  \UPS\WorldEaseShipmentManagement\WorldEaseShipmentManagement\PostRequest $body body (optional)
     *
     * @throws \UPS\WorldEaseShipmentManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \UPS\WorldEaseShipmentManagement\WorldEaseShipmentManagement\PostResponse
     */
    public function saveCloseOutShipment($trans_id, $transaction_src, $shipment_gccn, $version, $body = null)
    {
        list($response) = $this->saveCloseOutShipmentWithHttpInfo($trans_id, $transaction_src, $shipment_gccn, $version, $body);
        return $response;
    }

    /**
     * Operation saveCloseOutShipmentWithHttpInfo
     *
     * Close Out Shipment
     *
     * @param  \UPS\WorldEaseShipmentManagement\WorldEaseShipmentManagement\CustomTransactionId $trans_id (required)
     * @param  \UPS\WorldEaseShipmentManagement\WorldEaseShipmentManagement\CustomTransactionSrc $transaction_src (required)
     * @param   $shipment_gccn The unique identifier of the shipment to close Out. It also known as GCCN. (required)
     * @param   $version Indicates WorldEase Shipment Management API to display the new release features (required)
     * @param  \UPS\WorldEaseShipmentManagement\WorldEaseShipmentManagement\PostRequest $body (optional)
     *
     * @throws \UPS\WorldEaseShipmentManagement\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \UPS\WorldEaseShipmentManagement\WorldEaseShipmentManagement\PostResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function saveCloseOutShipmentWithHttpInfo($trans_id, $transaction_src, $shipment_gccn, $version, $body = null)
    {
        $returnType = '\UPS\WorldEaseShipmentManagement\WorldEaseShipmentManagement\PostResponse';
        $request = $this->saveCloseOutShipmentRequest($trans_id, $transaction_src, $shipment_gccn, $version, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\UPS\WorldEaseShipmentManagement\WorldEaseShipmentManagement\PostResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\UPS\WorldEaseShipmentManagement\WorldEaseShipmentManagement\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\UPS\WorldEaseShipmentManagement\WorldEaseShipmentManagement\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\UPS\WorldEaseShipmentManagement\WorldEaseShipmentManagement\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation saveCloseOutShipmentAsync
     *
     * Close Out Shipment
     *
     * @param  \UPS\WorldEaseShipmentManagement\WorldEaseShipmentManagement\CustomTransactionId $trans_id (required)
     * @param  \UPS\WorldEaseShipmentManagement\WorldEaseShipmentManagement\CustomTransactionSrc $transaction_src (required)
     * @param   $shipment_gccn The unique identifier of the shipment to close Out. It also known as GCCN. (required)
     * @param   $version Indicates WorldEase Shipment Management API to display the new release features (required)
     * @param  \UPS\WorldEaseShipmentManagement\WorldEaseShipmentManagement\PostRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function saveCloseOutShipmentAsync($trans_id, $transaction_src, $shipment_gccn, $version, $body = null)
    {
        return $this->saveCloseOutShipmentAsyncWithHttpInfo($trans_id, $transaction_src, $shipment_gccn, $version, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation saveCloseOutShipmentAsyncWithHttpInfo
     *
     * Close Out Shipment
     *
     * @param  \UPS\WorldEaseShipmentManagement\WorldEaseShipmentManagement\CustomTransactionId $trans_id (required)
     * @param  \UPS\WorldEaseShipmentManagement\WorldEaseShipmentManagement\CustomTransactionSrc $transaction_src (required)
     * @param   $shipment_gccn The unique identifier of the shipment to close Out. It also known as GCCN. (required)
     * @param   $version Indicates WorldEase Shipment Management API to display the new release features (required)
     * @param  \UPS\WorldEaseShipmentManagement\WorldEaseShipmentManagement\PostRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function saveCloseOutShipmentAsyncWithHttpInfo($trans_id, $transaction_src, $shipment_gccn, $version, $body = null)
    {
        $returnType = '\UPS\WorldEaseShipmentManagement\WorldEaseShipmentManagement\PostResponse';
        $request = $this->saveCloseOutShipmentRequest($trans_id, $transaction_src, $shipment_gccn, $version, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'saveCloseOutShipment'
     *
     * @param  \UPS\WorldEaseShipmentManagement\WorldEaseShipmentManagement\CustomTransactionId $trans_id (required)
     * @param  \UPS\WorldEaseShipmentManagement\WorldEaseShipmentManagement\CustomTransactionSrc $transaction_src (required)
     * @param   $shipment_gccn The unique identifier of the shipment to close Out. It also known as GCCN. (required)
     * @param   $version Indicates WorldEase Shipment Management API to display the new release features (required)
     * @param  \UPS\WorldEaseShipmentManagement\WorldEaseShipmentManagement\PostRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function saveCloseOutShipmentRequest($trans_id, $transaction_src, $shipment_gccn, $version, $body = null)
    {
        // verify the required parameter 'trans_id' is set
        if ($trans_id === null || (is_array($trans_id) && count($trans_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $trans_id when calling saveCloseOutShipment'
            );
        }
        // verify the required parameter 'transaction_src' is set
        if ($transaction_src === null || (is_array($transaction_src) && count($transaction_src) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transaction_src when calling saveCloseOutShipment'
            );
        }
        // verify the required parameter 'shipment_gccn' is set
        if ($shipment_gccn === null || (is_array($shipment_gccn) && count($shipment_gccn) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipment_gccn when calling saveCloseOutShipment'
            );
        }
        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling saveCloseOutShipment'
            );
        }

        $resourcePath = '/master-shipment/closeout/{shipment-gccn}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($trans_id !== null) {
            $headerParams['transId'] = ObjectSerializer::toHeaderValue($trans_id);
        }
        // header params
        if ($transaction_src !== null) {
            $headerParams['transactionSrc'] = ObjectSerializer::toHeaderValue($transaction_src);
        }

        // path params
        if ($shipment_gccn !== null) {
            $resourcePath = str_replace(
                '{' . 'shipment-gccn' . '}',
                ObjectSerializer::toPathValue($shipment_gccn),
                $resourcePath
            );
        }
        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                '{' . 'version' . '}',
                ObjectSerializer::toPathValue($version),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
