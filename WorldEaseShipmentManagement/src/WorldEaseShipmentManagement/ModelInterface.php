<?php
/**
 * ModelInterface
 *
 * PHP version 5
 *
 * @category Class
 * @package  UPS\WorldEaseShipmentManagement\WorldEaseShipmentManagement
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * WorldEase Shipment Management API v1
 *
 * ## Purpose The WorldEase Shipment Management API facilitates the consolidation of packages into a single shipment to reduce the brokerage fees and streamline international shipping processes. It offers users the ability to manage the shipment lifecycle including aggregating individual packages, closing out shipments once consolidation is completed and managing master and child shipments with options to delete as necessary.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.71
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace UPS\WorldEaseShipmentManagement\WorldEaseShipmentManagement;

/**
 * Interface abstracting model access.
 *
 * @package UPS\WorldEaseShipmentManagement\WorldEaseShipmentManagement
 * @author  Swagger Codegen team
 */
interface ModelInterface
{
    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName();

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes();

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats();

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     *
     * @return array
     */
    public static function attributeMap();

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters();

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters();

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array
     */
    public function listInvalidProperties();

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool
     */
    public function valid();
}
